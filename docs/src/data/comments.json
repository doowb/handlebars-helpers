{
  "methods": {
    "array": {
      "name": "array",
      "path": "lib/array.js",
      "tests": "test/array.js",
      "data": {
        "methods": {
          "after": {
            "name": "after",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 12
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 33,
              "end": 36,
              "raw": "helpers.after = function(array, n) {\n  if (utils.isUndefined(array)) return '';\n  return array.slice(n);\n};",
              "params": [
                "array",
                "n"
              ]
            },
            "comment": {
              "start": 18,
              "end": 31,
              "raw": "*\n * Returns all of the items in an array after the specified index.\n * Opposite of [before][].\n *\n * ```handlebars\n * {{after \"['a', 'b', 'c']\" 1}}\n * //=> '[\"c\"]'\n * ```\n *\n * @param {Array} `array` Collection\n * @param {Number} `n` Starting index (number of items to exclude)\n * @return {Array} Array exluding `n` items.\n * @api public\n ",
              "lines": [
                "",
                "Returns all of the items in an array after the specified index.",
                "Opposite of [before][].",
                "",
                "```handlebars",
                "{{after \"['a', 'b', 'c']\" 1}}",
                "//=> '[\"c\"]'",
                "```",
                "",
                "@param {Array} `array` Collection",
                "@param {Number} `n` Starting index (number of items to exclude)",
                "@return {Array} Array exluding `n` items.",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "array"
            }
          },
          "arrayify": {
            "name": "arrayify",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 28
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 50,
              "end": 52,
              "raw": "helpers.arrayify = function (value) {\n  return value ? (Array.isArray(value) ? value : [value]) : [];\n};",
              "params": [
                "value"
              ]
            },
            "comment": {
              "start": 38,
              "end": 48,
              "raw": "*\n * Cast the given `value` to an array.\n *\n * ```handlebars\n * {{arrayify \"foo\"}}\n * //=> '[\"foo\"]'\n * ```\n * @param {any} `value`\n * @return {Array}\n * @api public\n ",
              "lines": [
                "",
                "Cast the given `value` to an array.",
                "",
                "```handlebars",
                "{{arrayify \"foo\"}}",
                "//=> '[\"foo\"]'",
                "```",
                "@param {any} `value`",
                "@return {Array}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "array"
            }
          },
          "before": {
            "name": "before",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 35
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 69,
              "end": 72,
              "raw": "helpers.before = function(array, n) {\n  if (utils.isUndefined(array)) return '';\n  return array.slice(0, -n);\n};",
              "params": [
                "array",
                "n"
              ]
            },
            "comment": {
              "start": 54,
              "end": 67,
              "raw": "*\n * Return all of the items in the collection before the specified\n * count. Opposite of [after][].\n *\n * ```handlebars\n * {{before \"['a', 'b', 'c']\" 2}}\n * //=> '[\"a\", \"b\"]'\n * ```\n *\n * @param {Array} `array`\n * @param {Number} `n`\n * @return {Array} Array excluding items after the given number.\n * @api public\n ",
              "lines": [
                "",
                "Return all of the items in the collection before the specified",
                "count. Opposite of [after][].",
                "",
                "```handlebars",
                "{{before \"['a', 'b', 'c']\" 2}}",
                "//=> '[\"a\", \"b\"]'",
                "```",
                "",
                "@param {Array} `array`",
                "@param {Number} `n`",
                "@return {Array} Array excluding items after the given number.",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "array"
            }
          },
          "eachIndex": {
            "name": "eachIndex",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 57
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 87,
              "end": 93,
              "raw": "helpers.eachIndex = function(array, options) {\n  var result = '';\n  for (var i = 0; i < array.length; i++) {\n    result += options.fn({item: array[i], index: i});\n  }\n  return result;\n};",
              "params": [
                "array",
                "options"
              ]
            },
            "comment": {
              "start": 74,
              "end": 85,
              "raw": "*\n * ```handlebars\n * {{#eachIndex collection}}\n *   {{item}} is {{index}}\n * {{/eachIndex}}\n * ```\n * @param {Array} `array`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "```handlebars",
                "{{#eachIndex collection}}",
                "{{item}} is {{index}}",
                "{{/eachIndex}}",
                "```",
                "@param {Array} `array`",
                "@param {Object} `options`",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "array"
            }
          },
          "filter": {
            "name": "filter",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 90
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 105,
              "end": 132,
              "raw": "helpers.filter = function(array, value, options) {\n  var content = '';\n  var results = [];\n\n  // filter on a specific property\n  var prop = options.hash && options.hash.property;\n  if (prop) {\n    results = filter(array, function (val) {\n      if (get(val, prop) === value) {\n        return true;\n      }\n    });\n  } else {\n\n    // filter on a string value\n    results = filter(array, function(v) {\n      return value === v;\n    });\n  }\n\n  if (results && results.length > 0) {\n    for (var i = 0; i < results.length; i++) {\n      content += options.fn(results[i]);\n    }\n    return content;\n  }\n  return options.inverse(this);\n};",
              "params": [
                "array",
                "value",
                "options"
              ]
            },
            "comment": {
              "start": 95,
              "end": 103,
              "raw": "*\n * @name .filter\n * @param {type} `array`\n * @param {type} `value`\n * @param {type} `options`\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "@name .filter",
                "@param {type} `array`",
                "@param {type} `value`",
                "@param {type} `options`",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "array"
            }
          },
          "first": {
            "name": "first",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 64
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 148,
              "end": 154,
              "raw": "helpers.first = function(array, n) {\n  if (utils.isUndefined(array)) return '';\n  if (!isNumber(n)) {\n    return array[0];\n  }\n  return array.slice(0, n);\n};",
              "params": [
                "array",
                "n"
              ]
            },
            "comment": {
              "start": 134,
              "end": 146,
              "raw": "*\n * Returns the first item, or first `n` items of an array.\n *\n * ```handlebars\n * {{first \"['a', 'b', 'c', 'd', 'e']\" 2}}\n * //=> '[\"a\", \"b\"]'\n * ```\n *\n * @param {Array} `array`\n * @param {Number} `n` Number of items to return, starting at `0`.\n * @return {Array}\n * @api public\n ",
              "lines": [
                "",
                "Returns the first item, or first `n` items of an array.",
                "",
                "```handlebars",
                "{{first \"['a', 'b', 'c', 'd', 'e']\" 2}}",
                "//=> '[\"a\", \"b\"]'",
                "```",
                "",
                "@param {Array} `array`",
                "@param {Number} `n` Number of items to return, starting at `0`.",
                "@return {Array}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "array"
            }
          },
          "forEach": {
            "name": "forEach",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 122
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 191,
              "end": 207,
              "raw": "helpers.forEach = function(array, options) {\n  var data = createFrame(options, options.hash);\n  var len = array.length;\n  var buffer = '';\n  var i = -1;\n\n  while (++i < len) {\n    var item = array[i];\n    data.index = i;\n    item.index = i + 1;\n    item.total = len;\n    item.isFirst = i === 0;\n    item.isLast = i === (len - 1);\n    buffer += options.fn(item, {data: data});\n  }\n  return buffer;\n};",
              "params": [
                "array",
                "options"
              ]
            },
            "comment": {
              "start": 156,
              "end": 189,
              "raw": "*\n * Iterates over each item in an array and exposes the current item\n * in the array as context to the inner block. In addition to\n * the current array item, the helper exposes the following variables\n * to the inner block:\n *\n * - `index`\n * - `total`\n * - `isFirst`\n * - `isLast`\n *\n * Also, `@index` is exposed as a private variable, and additional\n * private variables may be defined as hash arguments.\n *\n * ```js\n * var accounts = [\n *   {'name': 'John', 'email': 'john@example.com'},\n *   {'name': 'Malcolm', 'email': 'malcolm@example.com'},\n *   {'name': 'David', 'email': 'david@example.com'}\n * ];\n *\n * // example usage\n * // {{#forEach accounts}}\n * //   <a href=\"mailto:{{ email }}\" title=\"Send an email to {{ name }}\">\n * //     {{ name }}\n * //   </a>{{#unless isLast}}, {{/unless}}\n * // {{/forEach}}\n * ```\n * @source <http://stackoverflow.com/questions/13861007>\n * @param {Array} `array`\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Iterates over each item in an array and exposes the current item",
                "in the array as context to the inner block. In addition to",
                "the current array item, the helper exposes the following variables",
                "to the inner block:",
                "",
                "- `index`",
                "- `total`",
                "- `isFirst`",
                "- `isLast`",
                "",
                "Also, `@index` is exposed as a private variable, and additional",
                "private variables may be defined as hash arguments.",
                "",
                "```js",
                "var accounts = [",
                "{'name': 'John', 'email': 'john@example.com'},",
                "{'name': 'Malcolm', 'email': 'malcolm@example.com'},",
                "{'name': 'David', 'email': 'david@example.com'}",
                "];",
                "",
                "// example usage",
                "// {{#forEach accounts}}",
                "//   <a href=\"mailto:{{ email }}\" title=\"Send an email to {{ name }}\">",
                "//     {{ name }}",
                "//   </a>{{#unless isLast}}, {{/unless}}",
                "// {{/forEach}}",
                "```",
                "@source <http://stackoverflow.com/questions/13861007>",
                "@param {Array} `array`",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "array"
            }
          },
          "inArray": {
            "name": "inArray",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 159
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 233,
              "end": 238,
              "raw": "helpers.inArray = function(array, value, options) {\n  if (indexOf.call(array, value) > -1) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "array",
                "value",
                "options"
              ]
            },
            "comment": {
              "start": 209,
              "end": 231,
              "raw": "*\n * Block helper that renders the block if an array has the\n * given `value`. Optionally specify an inverse block to render\n * when the array does not have the given value.\n *\n * Given the array `['a', 'b', 'c']`:\n *\n * ```handlebars\n * {{#inArray array \"d\"}}\n *   foo\n * {{else}}\n *   bar\n * {{/inArray}}\n * ```\n *\n * @name .inArray\n * @param {type} `array`\n * @param {type} `value`\n * @param {type} `options`\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders the block if an array has the",
                "given `value`. Optionally specify an inverse block to render",
                "when the array does not have the given value.",
                "",
                "Given the array `['a', 'b', 'c']`:",
                "",
                "```handlebars",
                "{{#inArray array \"d\"}}",
                "foo",
                "{{else}}",
                "bar",
                "{{/inArray}}",
                "```",
                "",
                "@name .inArray",
                "@param {type} `array`",
                "@param {type} `value`",
                "@param {type} `options`",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "array"
            }
          },
          "isArray": {
            "name": "isArray",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 171
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 253,
              "end": 255,
              "raw": "helpers.isArray = function(value) {\n  return Array.isArray(value);\n};",
              "params": [
                "value"
              ]
            },
            "comment": {
              "start": 240,
              "end": 251,
              "raw": "*\n * Returns true if `value` is an es5 array.\n *\n * ```handlebars\n * {{isArray \"abc\"}}\n * //=> 'false'\n * ```\n *\n * @param {any} `value` The value to test.\n * @return {Boolean}\n * @api public\n ",
              "lines": [
                "",
                "Returns true if `value` is an es5 array.",
                "",
                "```handlebars",
                "{{isArray \"abc\"}}",
                "//=> 'false'",
                "```",
                "",
                "@param {any} `value` The value to test.",
                "@return {Boolean}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "array"
            }
          },
          "join": {
            "name": "join",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 181
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 275,
              "end": 281,
              "raw": "helpers.join = function(array, sep) {\n  if (utils.isUndefined(array)) return '';\n  sep = typeof sep !== 'string'\n    ? ', '\n    : sep;\n  return array.join(sep);\n};",
              "params": [
                "array",
                "sep"
              ]
            },
            "comment": {
              "start": 257,
              "end": 273,
              "raw": "*\n * Join all elements of array into a string, optionally using a\n * given separator.\n *\n * ```handlebars\n * {{join \"['a', 'b', 'c']\"}}\n * //=> 'a, b, c'\n *\n * {{join \"['a', 'b', 'c']\" '-'}}\n * //=> 'a-b-c'\n * ```\n *\n * @param {Array} `array`\n * @param {String} `sep` The separator to use.\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Join all elements of array into a string, optionally using a",
                "given separator.",
                "",
                "```handlebars",
                "{{join \"['a', 'b', 'c']\"}}",
                "//=> 'a, b, c'",
                "",
                "{{join \"['a', 'b', 'c']\" '-'}}",
                "//=> 'a-b-c'",
                "```",
                "",
                "@param {Array} `array`",
                "@param {String} `sep` The separator to use.",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "array"
            }
          },
          "last": {
            "name": "last",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 196
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 297,
              "end": 302,
              "raw": "helpers.last = function(array, n) {\n  if (!isNumber(n)) {\n    return array[array.length - 1];\n  }\n  return array.slice(-n);\n};",
              "params": [
                "array",
                "n"
              ]
            },
            "comment": {
              "start": 283,
              "end": 295,
              "raw": "*\n * Returns the last item, or last `n` items of an array.\n * Opposite of [first][].\n *\n * ```handlebars\n * {{last \"['a', 'b', 'c', 'd', 'e']\" 2}}\n * //=> '[\"d\", \"e\"]'\n * ```\n * @param {Array} `array`\n * @param {Number} `n` Number of items to return, starting with the last item.\n * @return {Array}\n * @api public\n ",
              "lines": [
                "",
                "Returns the last item, or last `n` items of an array.",
                "Opposite of [first][].",
                "",
                "```handlebars",
                "{{last \"['a', 'b', 'c', 'd', 'e']\" 2}}",
                "//=> '[\"d\", \"e\"]'",
                "```",
                "@param {Array} `array`",
                "@param {Number} `n` Number of items to return, starting with the last item.",
                "@return {Array}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "array"
            }
          },
          "lengthEqual": {
            "name": "lengthEqual",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 210
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 319,
              "end": 324,
              "raw": "helpers.lengthEqual = function(array, length, options) {\n  if (array.length === length) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "array",
                "length",
                "options"
              ]
            },
            "comment": {
              "start": 304,
              "end": 317,
              "raw": "*\n * Block helper that compares the length of the given array to\n * the number passed as the second argument. If the array length\n * is equal to the given `length`, the block is returned,\n * otherwise an inverse block may optionally be returned.\n *\n * @name .lengthEqual\n * @param {type} `array`\n * @param {type} `length`\n * @param {type} `options`\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that compares the length of the given array to",
                "the number passed as the second argument. If the array length",
                "is equal to the given `length`, the block is returned,",
                "otherwise an inverse block may optionally be returned.",
                "",
                "@name .lengthEqual",
                "@param {type} `array`",
                "@param {type} `length`",
                "@param {type} `options`",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "array"
            }
          },
          "map": {
            "name": "map",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 247
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 346,
              "end": 359,
              "raw": "helpers.map = function(array, fn) {\n  if (utils.isUndefined(array)) return '';\n  if (typeof array === 'string' && /[[]/.test(array)) {\n    array = utils.tryParse(array) || [];\n  }\n  var len = array.length;\n  var res = new Array(len);\n  var i = -1;\n\n  while (++i < len) {\n    res[i] = fn(array[i], i, array);\n  }\n  return res;\n};",
              "params": [
                "array",
                "fn"
              ]
            },
            "comment": {
              "start": 326,
              "end": 344,
              "raw": "*\n * Returns a new array, created by calling `function`\n * on each element of the given `array`.\n *\n * ```js\n * // register `double` as a helper\n * function double(str) {\n *   return str + str;\n * }\n * // then used like this:\n * // {{map \"['a', 'b', 'c']\" double}}\n * //=> '[\"aa\", \"bb\", \"cc\"]'\n * ```\n *\n * @param {Array} `array`\n * @param {Function} `fn`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Returns a new array, created by calling `function`",
                "on each element of the given `array`.",
                "",
                "```js",
                "// register `double` as a helper",
                "function double(str) {",
                "return str + str;",
                "}",
                "// then used like this:",
                "// {{map \"['a', 'b', 'c']\" double}}",
                "//=> '[\"aa\", \"bb\", \"cc\"]'",
                "```",
                "",
                "@param {Array} `array`",
                "@param {Function} `fn`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "array"
            }
          },
          "some": {
            "name": "some",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 222
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 381,
              "end": 395,
              "raw": "helpers.some = function(arr, cb, options) {\n  cb = iterator(cb, this);\n  if (arr == null) {\n    return options.inverse(this);\n  }\n\n  var result = false;\n  var len = arr.length, i = -1;\n  while (++i < len) {\n    if (cb(arr[i], i, arr)) {\n      return options.fn(this);\n    }\n  }\n  return options.inverse(this);\n};",
              "params": [
                "arr",
                "cb",
                "options"
              ]
            },
            "comment": {
              "start": 361,
              "end": 379,
              "raw": "*\n * Block helper that returns the block if the callback returns true\n * for some value in the given array.\n *\n * ```handlebars\n * {{#some array isString}}\n *   Render me if the array has a string.\n * {{else}}\n *   Render me if it doesn't.\n * {{/some}}\n * ```\n * @name .some\n * @param {Array} `array`\n * @param {Function} `cb` callback function\n * @param {Options} Handlebars provided options object\n * @return {Array}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that returns the block if the callback returns true",
                "for some value in the given array.",
                "",
                "```handlebars",
                "{{#some array isString}}",
                "Render me if the array has a string.",
                "{{else}}",
                "Render me if it doesn't.",
                "{{/some}}",
                "```",
                "@name .some",
                "@param {Array} `array`",
                "@param {Function} `cb` callback function",
                "@param {Options} Handlebars provided options object",
                "@return {Array}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "array"
            }
          },
          "sort": {
            "name": "sort",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 276
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 413,
              "end": 419,
              "raw": "helpers.sort = function(arr, options) {\n  if (utils.isUndefined(arr)) return '';\n  if (get(options, 'hash.reverse')) {\n    return arr.sort().reverse();\n  }\n  return arr.sort();\n};",
              "params": [
                "arr",
                "options"
              ]
            },
            "comment": {
              "start": 397,
              "end": 411,
              "raw": "*\n * Sort the given `array`. If an array of objects is passed,\n * you may optionally pass a `key` to sort on as the second\n * argument. You may alternatively pass a sorting function as\n * the second argument.\n *\n * ```handlebars\n * {{sort \"['b', 'a', 'c']\"}}\n * //=> 'a,b,c'\n * ```\n *\n * @param {Array} `array` the array to sort.\n * @param {String|Function} `key` The object key to sort by, or sorting function.\n * @api public\n ",
              "lines": [
                "",
                "Sort the given `array`. If an array of objects is passed,",
                "you may optionally pass a `key` to sort on as the second",
                "argument. You may alternatively pass a sorting function as",
                "the second argument.",
                "",
                "```handlebars",
                "{{sort \"['b', 'a', 'c']\"}}",
                "//=> 'a,b,c'",
                "```",
                "",
                "@param {Array} `array` the array to sort.",
                "@param {String|Function} `key` The object key to sort by, or sorting function.",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "array"
            }
          },
          "sortBy": {
            "name": "sortBy",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 301
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 440,
              "end": 452,
              "raw": "helpers.sortBy = function(arr/*, prop*/) {\n  if (utils.isUndefined(arr)) return '';\n  var args = [].slice.call(arguments);\n  args.pop(); // remove hbs options object\n\n  if (typeof args[0] === 'string' && /[[]/.test(args[0])) {\n    args[0] = utils.tryParse(args[0]) || [];\n  }\n  if (utils.isUndefined(args[1])) {\n    return args[0].sort();\n  }\n  return sortBy.apply(null, args);\n};",
              "params": [
                "arr"
              ]
            },
            "comment": {
              "start": 421,
              "end": 438,
              "raw": "*\n * Sort an `array`. If an array of objects is passed,\n * you may optionally pass a `key` to sort on as the second\n * argument. You may alternatively pass a sorting function as\n * the second argument.\n *\n * ```handlebars\n * {{sortBy '[\"b\", \"a\", \"c\"]'}}\n * //=> 'a,b,c'\n *\n * {{sortBy '[{a: \"zzz\"}, {a: \"aaa\"}]' \"a\"}}\n * //=> '[{\"a\":\"aaa\"},{\"a\":\"zzz\"}]'\n * ```\n *\n * @param {Array} `array` the array to sort.\n * @param {String|Function} `props` One or more properties to sort by, or sorting functions to use.\n * @api public\n ",
              "lines": [
                "",
                "Sort an `array`. If an array of objects is passed,",
                "you may optionally pass a `key` to sort on as the second",
                "argument. You may alternatively pass a sorting function as",
                "the second argument.",
                "",
                "```handlebars",
                "{{sortBy '[\"b\", \"a\", \"c\"]'}}",
                "//=> 'a,b,c'",
                "",
                "{{sortBy '[{a: \"zzz\"}, {a: \"aaa\"}]' \"a\"}}",
                "//=> '[{\"a\":\"aaa\"},{\"a\":\"zzz\"}]'",
                "```",
                "",
                "@param {Array} `array` the array to sort.",
                "@param {String|Function} `props` One or more properties to sort by, or sorting functions to use.",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "array"
            }
          },
          "withAfter": {
            "name": "withAfter",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 333
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 466,
              "end": 475,
              "raw": "helpers.withAfter = function(array, idx, options) {\n  array = array.slice(idx);\n  var result = '';\n\n  var len = array.length, i = -1;\n  while (++i < len) {\n    result += options.fn(array[i]);\n  }\n  return result;\n};",
              "params": [
                "array",
                "idx",
                "options"
              ]
            },
            "comment": {
              "start": 454,
              "end": 464,
              "raw": "*\n * Use the items in the array _after_ the specified index\n * as context inside a block. Opposite of [withBefore][].\n *\n * @param {Array} `array`\n * @param {Number} `idx`\n * @param {Object} `options`\n * @return {Array}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Use the items in the array _after_ the specified index",
                "as context inside a block. Opposite of [withBefore][].",
                "",
                "@param {Array} `array`",
                "@param {Number} `idx`",
                "@param {Object} `options`",
                "@return {Array}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "array"
            }
          },
          "withBefore": {
            "name": "withBefore",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 340
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 494,
              "end": 503,
              "raw": "helpers.withBefore = function(array, idx, options) {\n  array = array.slice(0, -idx);\n  var result = '';\n\n  var len = array.length, i = -1;\n  while (++i < len) {\n    result += options.fn(array[i]);\n  }\n  return result;\n};",
              "params": [
                "array",
                "idx",
                "options"
              ]
            },
            "comment": {
              "start": 477,
              "end": 492,
              "raw": "*\n * Use the items in the array _before_ the specified index\n * as context inside a block.Opposite of [withAfter][].\n *\n * ```handlebars\n * {{#withBefore array 3}}\n *   {{this}}\n * {{/withBefore}}\n * ```\n * @param {Array} `array`\n * @param {Number} `idx`\n * @param {Object} `options`\n * @return {Array}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Use the items in the array _before_ the specified index",
                "as context inside a block.Opposite of [withAfter][].",
                "",
                "```handlebars",
                "{{#withBefore array 3}}",
                "{{this}}",
                "{{/withBefore}}",
                "```",
                "@param {Array} `array`",
                "@param {Number} `idx`",
                "@param {Object} `options`",
                "@return {Array}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "array"
            }
          },
          "withFirst": {
            "name": "withFirst",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 347
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 517,
              "end": 537,
              "raw": "helpers.withFirst = function(arr, idx, options) {\n  if (utils.isUndefined(arr)) return '';\n  arr = utils.result(arr);\n\n  if (!utils.isUndefined(idx)) {\n    idx = parseFloat(utils.result(idx));\n  }\n\n  if (utils.isUndefined(idx)) {\n    options = idx;\n    return options.fn(arr[0]);\n  }\n\n  arr = arr.slice(0, idx);\n  var len = arr.length, i = -1;\n  var result = '';\n  while (++i < len) {\n    result += options.fn(arr[i]);\n  }\n  return result;\n};",
              "params": [
                "arr",
                "idx",
                "options"
              ]
            },
            "comment": {
              "start": 505,
              "end": 515,
              "raw": "*\n * Use the first item in a collection inside a handlebars\n * block expression. Opposite of [withLast][].\n *\n * @param {Array} `array`\n * @param {Number} `idx`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Use the first item in a collection inside a handlebars",
                "block expression. Opposite of [withLast][].",
                "",
                "@param {Array} `array`",
                "@param {Number} `idx`",
                "@param {Object} `options`",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "array"
            }
          },
          "withLast": {
            "name": "withLast",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 361
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 551,
              "end": 571,
              "raw": "helpers.withLast = function(array, idx, options) {\n  if (utils.isUndefined(array)) return '';\n  array = utils.result(array);\n\n  if (!utils.isUndefined(idx)) {\n    idx = parseFloat(utils.result(idx));\n  }\n\n  if (utils.isUndefined(idx)) {\n    options = idx;\n    return options.fn(array[array.length - 1]);\n  }\n\n  array = array.slice(-idx);\n  var len = array.length, i = -1;\n  var result = '';\n  while (++i < len) {\n    result += options.fn(array[i]);\n  }\n  return result;\n};",
              "params": [
                "array",
                "idx",
                "options"
              ]
            },
            "comment": {
              "start": 539,
              "end": 549,
              "raw": "*\n * Use the last item or `n` items in an array as context inside a block.\n * Opposite of [withFirst][].\n *\n * @param {Array} `array`\n * @param {Number} `idx` The starting index.\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Use the last item or `n` items in an array as context inside a block.",
                "Opposite of [withFirst][].",
                "",
                "@param {Array} `array`",
                "@param {Number} `idx` The starting index.",
                "@param {Object} `options`",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "array"
            }
          },
          "withSort": {
            "name": "withSort",
            "path": "lib/array.js",
            "test": {
              "path": "test/array.js",
              "code": {
                "start": 375
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 586,
              "end": 619,
              "raw": "helpers.withSort = function(array, prop, options) {\n  if (utils.isUndefined(array)) return '';\n  var result = '';\n\n  if (utils.isUndefined(prop)) {\n    options = prop;\n\n    array = array.sort();\n    if (get(options, 'hash.reverse')) {\n      array = array.reverse();\n    }\n\n    for (var i = 0, len = array.length; i < len; i++) {\n      result += options.fn(array[i]);\n    }\n    return result;\n  }\n\n  array.sort(function(a, b) {\n    a = get(a, prop);\n    b = get(b, prop);\n    return a > b;\n  });\n\n  if (get(options, 'hash.reverse')) {\n    array = array.reverse();\n  }\n\n  var alen = array.length, j = -1;\n  while (++j < alen) {\n    result += options.fn(array[j]);\n  }\n  return result;\n};",
              "params": [
                "array",
                "prop",
                "options"
              ]
            },
            "comment": {
              "start": 573,
              "end": 584,
              "raw": "*\n * Block helper that sorts a collection and exposes the sorted\n * collection as context inside the block.\n *\n * @name .withSort\n * @param {type} `array`\n * @param {type} `prop`\n * @param {type} `options` Specify `reverse=\"true\"` to reverse the array.\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that sorts a collection and exposes the sorted",
                "collection as context inside the block.",
                "",
                "@name .withSort",
                "@param {type} `array`",
                "@param {type} `prop`",
                "@param {type} `options` Specify `reverse=\"true\"` to reverse the array.",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "array"
            }
          }
        },
        "codepath": "lib/array.js",
        "count": 21
      },
      "missingdocs": []
    },
    "code": {
      "name": "code",
      "path": "lib/code.js",
      "tests": "test/code.js",
      "data": {
        "methods": {
          "embed": {
            "name": "embed",
            "path": "lib/code.js",
            "test": {
              "path": "test/code.js",
              "code": {
                "start": 9
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 31,
              "end": 43,
              "raw": "helpers.embed = function embed(fp, ext) {\n  ext = typeof ext !== 'string'\n    ? path.extname(fp).slice(1)\n    : ext;\n\n  var code = fs.readFileSync(fp, 'utf8');\n  if (ext === 'markdown' || ext === 'md') {\n    ext = 'markdown';\n    // if the string is markdown, escape backticks\n    code = code.split('`').join('&#x60');\n  }\n  return block(code, ext).trim() + '\\n';\n};",
              "params": [
                "fp",
                "ext"
              ]
            },
            "comment": {
              "start": 15,
              "end": 29,
              "raw": "*\n * Embed code from an external file as preformatted text.\n *\n * ```handlebars\n * {{embed 'path/to/file.js'}}\n *\n * // specify the language to use\n * {{embed 'path/to/file.hbs' 'html')}}\n * ```\n *\n * @param {String} `fp` filepath to the file to embed.\n * @param {String} `language` Optionally specify the language to use for syntax highlighting.\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Embed code from an external file as preformatted text.",
                "",
                "```handlebars",
                "{{embed 'path/to/file.js'}}",
                "",
                "// specify the language to use",
                "{{embed 'path/to/file.hbs' 'html')}}",
                "```",
                "",
                "@param {String} `fp` filepath to the file to embed.",
                "@param {String} `language` Optionally specify the language to use for syntax highlighting.",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "code"
            }
          },
          "gist": {
            "name": "gist",
            "path": "lib/code.js",
            "test": {
              "path": "test/code.js",
              "code": {
                "start": 61
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 56,
              "end": 58,
              "raw": "helpers.gist = function (id) {\n  return '<script src=\"https://gist.github.com/' + id + '.js\"></script>';\n};",
              "params": [
                "id"
              ]
            },
            "comment": {
              "start": 45,
              "end": 54,
              "raw": "*\n * Embed a GitHub Gist using only the id of the Gist\n *\n * ```handlebars\n * {{gist 12345}}\n * ```\n * @param  {String} `id`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Embed a GitHub Gist using only the id of the Gist",
                "",
                "```handlebars",
                "{{gist 12345}}",
                "```",
                "@param  {String} `id`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "code"
            }
          },
          "jsfiddle": {
            "name": "jsfiddle",
            "path": "lib/code.js",
            "test": {
              "path": "test/code.js",
              "code": {
                "start": 68
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 72,
              "end": 95,
              "raw": "helpers.jsfiddle = function jsFiddle(attr) {\n  attr = object.merge({}, attr, attr.hash);\n  delete attr.name;\n  delete attr.hash;\n  delete attr.data;\n\n  if (typeof attr.id === 'undefined') {\n    throw new Error('jsfiddle helper expects an `id`');\n  }\n\n  attr.id = 'http://jsfiddle.net/' + attr.id;\n  attr.width = attr.width || '100%';\n  attr.height = attr.height || '300';\n  attr.skin = attr.skin || '/presentation/';\n  attr.tabs = (attr.tabs || 'result,js,html,css') + attr.skin;\n  attr.src = attr.id + '/embedded/' + attr.tabs;\n  attr.allowfullscreen = attr.allowfullscreen || 'allowfullscreen';\n  attr.frameborder = attr.frameborder || '0';\n\n  delete attr.tabs;\n  delete attr.skin;\n  delete attr.id;\n  return '<iframe ' + html.parseAttributes(attr) + '></iframe>';\n};",
              "params": [
                "attr"
              ]
            },
            "comment": {
              "start": 60,
              "end": 70,
              "raw": "*\n * Generate the HTML for a jsFiddle link with the given `params`\n *\n * ```handlebars\n * {{jsfiddle id=\"0dfk10ks\" tabs=\"true\"}}\n * ```\n *\n * @param {Object} `params`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Generate the HTML for a jsFiddle link with the given `params`",
                "",
                "```handlebars",
                "{{jsfiddle id=\"0dfk10ks\" tabs=\"true\"}}",
                "```",
                "",
                "@param {Object} `params`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "code"
            }
          }
        },
        "codepath": "lib/code.js",
        "count": 3
      },
      "missingdocs": []
    },
    "collection": {
      "name": "collection",
      "path": "lib/collection.js",
      "tests": "test/collection.js",
      "data": {
        "methods": {
          "isEmpty": {
            "name": "isEmpty",
            "path": "lib/collection.js",
            "test": {
              "path": "test/collection.js",
              "code": {
                "start": 37
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 28,
              "end": 43,
              "raw": "helpers.isEmpty = function(collection, options) {\n  if (options == null) {\n    options = collection;\n    return options.fn(this);\n  }\n\n  if (Array.isArray(collection) && !collection.length) {\n    return options.fn(this);\n  }\n\n  var keys = Object.keys(collection);\n  if (typeof collection === 'object' && !keys.length) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "collection",
                "options"
              ]
            },
            "comment": {
              "start": 15,
              "end": 26,
              "raw": "*\n * Block helper that returns a block if the given collection is\n * empty. If the collection is not empty the inverse block is returned\n * (if supplied).\n *\n * @name .isEmpty\n * @param {type} `collection`\n * @param {type} `options`\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that returns a block if the given collection is",
                "empty. If the collection is not empty the inverse block is returned",
                "(if supplied).",
                "",
                "@name .isEmpty",
                "@param {type} `collection`",
                "@param {type} `options`",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "collection"
            }
          },
          "iterate": {
            "name": "iterate",
            "path": "lib/collection.js",
            "test": {
              "path": "test/collection.js",
              "code": {
                "start": 64
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 56,
              "end": 63,
              "raw": "helpers.iterate = function(context, options) {\n  if (Array.isArray(context)) {\n    return forEach.apply(forEach, arguments);\n  } else if (utils.isObject(context)) {\n    return forOwn.apply(forOwn, arguments);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "context",
                "options"
              ]
            },
            "comment": {
              "start": 45,
              "end": 54,
              "raw": "*\n * Iterate over an array or object,\n *\n * @name .iterate\n * @param {Object|Array} `context` The collection to iterate over\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Iterate over an array or object,",
                "",
                "@name .iterate",
                "@param {Object|Array} `context` The collection to iterate over",
                "@param {Object} `options`",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "collection"
            }
          },
          "length": {
            "name": "length",
            "path": "lib/collection.js",
            "test": {
              "path": "test/collection.js",
              "code": {
                "start": 11
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 77,
              "end": 86,
              "raw": "helpers.length = function(value) {\n  if (utils.isUndefined(value)) return '';\n  if (typeof value === 'string' && /[[]/.test(value)) {\n    value = utils.tryParse(value) || [];\n  }\n  if (utils.isObject(value)) {\n    value = Object.keys(value);\n  }\n  return value.length;\n};",
              "params": [
                "value"
              ]
            },
            "comment": {
              "start": 65,
              "end": 75,
              "raw": "*\n * Returns the length of the given collection.\n *\n * ```handlebars\n * {{length \"['a', 'b', 'c']\"}}\n * //=> 3\n * ```\n * @param  {Array|Object|String} `value`\n * @return {Number} The length of the value.\n * @api public\n ",
              "lines": [
                "",
                "Returns the length of the given collection.",
                "",
                "```handlebars",
                "{{length \"['a', 'b', 'c']\"}}",
                "//=> 3",
                "```",
                "@param  {Array|Object|String} `value`",
                "@return {Number} The length of the value.",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "collection"
            }
          }
        },
        "codepath": "lib/collection.js",
        "count": 3
      },
      "missingdocs": []
    },
    "comparison": {
      "name": "comparison",
      "path": "lib/comparison.js",
      "tests": "test/comparison.js",
      "data": {
        "methods": {
          "and": {
            "name": "and",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 11
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 29,
              "end": 34,
              "raw": "helpers.and = function(a, b, options) {\n  if (a && b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "a",
                "b",
                "options"
              ]
            },
            "comment": {
              "start": 16,
              "end": 27,
              "raw": "*\n * Block helper that renders the block if **both** of the given values\n * are truthy. If an inverse block is specified it will be rendered\n * when falsy.\n *\n * @param {any} `a`\n * @param {any} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders the block if **both** of the given values",
                "are truthy. If an inverse block is specified it will be rendered",
                "when falsy.",
                "",
                "@param {any} `a`",
                "@param {any} `b`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "compare": {
            "name": "compare",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 23
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 51,
              "end": 97,
              "raw": "helpers.compare = function(a, operator, b, options) {\n  /*jshint eqeqeq: false*/\n\n  if (arguments.length < 4) {\n    throw new Error('handlebars Helper {{compare}} expects 2 arguments.');\n  }\n\n  var result;\n\n  switch(operator) {\n    case '==':\n      result = a == b;\n      break;\n    case '===':\n      result = a === b;\n      break;\n    case '!=':\n      result = a != b;\n      break;\n    case '!==':\n      result = a !== b;\n      break;\n    case '<':\n      result = a < b;\n      break;\n    case '>':\n      result = a > b;\n      break;\n    case '<=':\n      result = a <= b;\n      break;\n    case '>=':\n      result = a >= b;\n      break;\n    case 'typeof':\n      result = typeof a === b;\n     break;\n     default: {\n       throw new Error('helper {{compare}}: invalid operator: `' + operator + '`');\n     }\n  }\n\n  if (result === false) {\n    return options.inverse(this);\n  }\n  return options.fn(this);\n};",
              "params": [
                "a",
                "operator",
                "b",
                "options"
              ]
            },
            "comment": {
              "start": 36,
              "end": 49,
              "raw": "*\n * Render a block when a comparison of the first and third\n * arguments returns true. The second argument is\n * the [arithemetic operator][operators] to use. You may also\n * optionally specify an inverse block to render when falsy.\n *\n * @param `a`\n * @param `operator` The operator to use. Operators must be enclosed in quotes: `\">\"`, `\"=\"`, `\"<=\"`, and so on.\n * @param `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or if specified the inverse block is rendered if falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Render a block when a comparison of the first and third",
                "arguments returns true. The second argument is",
                "the [arithemetic operator][operators] to use. You may also",
                "optionally specify an inverse block to render when falsy.",
                "",
                "@param `a`",
                "@param `operator` The operator to use. Operators must be enclosed in quotes: `\">\"`, `\"=\"`, `\"<=\"`, and so on.",
                "@param `b`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String} Block, or if specified the inverse block is rendered if falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "contains": {
            "name": "contains",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 149
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 123,
              "end": 132,
              "raw": "helpers.contains = function(collection, value, startIndex, options) {\n  if (typeof startIndex === 'object') {\n    options = startIndex;\n    startIndex = undefined;\n  }\n  if (contains(collection, value, startIndex)) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "collection",
                "value",
                "startIndex",
                "options"
              ]
            },
            "comment": {
              "start": 99,
              "end": 121,
              "raw": "*\n * Block helper that renders the block if `collection` has the\n * given `value`, using strict equality (`===`) for comparison,\n * otherwise the inverse block is rendered (if specified). If a\n * `startIndex` is specified and is negative, it is used as the\n * offset from the end of the collection.\n *\n * Given the array `['a', 'b', 'c']`:\n *\n * ```handlebars\n * {{#contains array \"d\"}}\n *   This will not be rendered.\n * {{else}}\n *   This will be rendered.\n * {{/contains}}\n * ```\n * @param {Array|Object|String} `collection` The collection to iterate over.\n * @param {any} `value` The value to check for.\n * @param {Number} `[startIndex=0]` Optionally define the starting index.\n * @param {Object} `options` Handlebars provided options object.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders the block if `collection` has the",
                "given `value`, using strict equality (`===`) for comparison,",
                "otherwise the inverse block is rendered (if specified). If a",
                "`startIndex` is specified and is negative, it is used as the",
                "offset from the end of the collection.",
                "",
                "Given the array `['a', 'b', 'c']`:",
                "",
                "```handlebars",
                "{{#contains array \"d\"}}",
                "This will not be rendered.",
                "{{else}}",
                "This will be rendered.",
                "{{/contains}}",
                "```",
                "@param {Array|Object|String} `collection` The collection to iterate over.",
                "@param {any} `value` The value to check for.",
                "@param {Number} `[startIndex=0]` Optionally define the starting index.",
                "@param {Object} `options` Handlebars provided options object.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "gt": {
            "name": "gt",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 176
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 150,
              "end": 159,
              "raw": "helpers.gt = function(a, b, options) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  if (a > b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "a",
                "b",
                "options"
              ]
            },
            "comment": {
              "start": 134,
              "end": 148,
              "raw": "*\n * Block helper that renders a block if `a` is **greater than** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @name .gt\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders a block if `a` is **greater than** `b`.",
                "",
                "If an inverse block is specified it will be rendered when falsy.",
                "You may optionally use the `compare=\"\"` hash argument for the",
                "second value.",
                "",
                "@name .gt",
                "@param {String} `a`",
                "@param {String} `b`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String} Block, or inverse block if specified and falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "gte": {
            "name": "gte",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 207
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 178,
              "end": 187,
              "raw": "helpers.gte = function(a, b, options) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  if (a >= b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "a",
                "b",
                "options"
              ]
            },
            "comment": {
              "start": 161,
              "end": 176,
              "raw": "*\n * Block helper that renders a block if `a` is **greater than or\n * equal to** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @name .gte\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders a block if `a` is **greater than or",
                "equal to** `b`.",
                "",
                "If an inverse block is specified it will be rendered when falsy.",
                "You may optionally use the `compare=\"\"` hash argument for the",
                "second value.",
                "",
                "@name .gte",
                "@param {String} `a`",
                "@param {String} `b`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String} Block, or inverse block if specified and falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "has": {
            "name": "has",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 222
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 201,
              "end": 219,
              "raw": "helpers.has = function(value, pattern, options) {\n  if (arguments.length === 2) {\n    return pattern.inverse(this);\n  }\n\n  if (arguments.length === 1) {\n    return value.inverse(this);\n  }\n\n  if ((Array.isArray(value) || isString(value)) && isString(pattern)) {\n    if (value.indexOf(pattern) > -1) {\n      return options.fn(this);\n    }\n  }\n  if (isObject(value) && isString(pattern) && pattern in value) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "value",
                "pattern",
                "options"
              ]
            },
            "comment": {
              "start": 189,
              "end": 199,
              "raw": "*\n * Block helper that renders a block if `value` has `pattern`.\n * If an inverse block is specified it will be rendered when falsy.\n *\n * @param {any} `val` The value to check.\n * @param {any} `pattern` The pattern to check for.\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders a block if `value` has `pattern`.",
                "If an inverse block is specified it will be rendered when falsy.",
                "",
                "@param {any} `val` The value to check.",
                "@param {any} `pattern` The pattern to check for.",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "eq": {
            "name": "eq",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 280
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 236,
              "end": 245,
              "raw": "helpers.eq = function(a, b, options) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  if (a === b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "a",
                "b",
                "options"
              ]
            },
            "comment": {
              "start": 221,
              "end": 234,
              "raw": "*\n * Block helper that renders a block if `a` is **equal to** `b`.\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @name .eq\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders a block if `a` is **equal to** `b`.",
                "If an inverse block is specified it will be rendered when falsy.",
                "You may optionally use the `compare=\"\"` hash argument for the",
                "second value.",
                "",
                "@name .eq",
                "@param {String} `a`",
                "@param {String} `b`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String} Block, or inverse block if specified and falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "ifEven": {
            "name": "ifEven",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 297
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 264,
              "end": 266,
              "raw": "helpers.ifEven = function(num, options) {\n  return isEven(num) ? options.fn(this) : options.inverse(this);\n};",
              "params": [
                "num",
                "options"
              ]
            },
            "comment": {
              "start": 247,
              "end": 262,
              "raw": "*\n * Return true if the given vaue is an even number.\n *\n * ```handlebars\n * {{#ifEven value}}\n *   render A\n * {{else}}\n *   render B\n * {{/ifEven}}\n * ```\n * @param  {Number} `number`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Return true if the given vaue is an even number.",
                "",
                "```handlebars",
                "{{#ifEven value}}",
                "render A",
                "{{else}}",
                "render B",
                "{{/ifEven}}",
                "```",
                "@param  {Number} `number`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String} Block, or inverse block if specified and falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "ifNth": {
            "name": "ifNth",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 309
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 281,
              "end": 286,
              "raw": "helpers.ifNth = function(a, b, options) {\n  if (++b % a === 0) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "a",
                "b",
                "options"
              ]
            },
            "comment": {
              "start": 268,
              "end": 279,
              "raw": "*\n * Conditionally renders a block if the remainder is zero when\n * `a` operand is divided by `b`. If an inverse block is specified\n * it will be rendered when the remainder is **not zero**.\n *\n * @param {Number}\n * @param {Number}\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Conditionally renders a block if the remainder is zero when",
                "`a` operand is divided by `b`. If an inverse block is specified",
                "it will be rendered when the remainder is **not zero**.",
                "",
                "@param {Number}",
                "@param {Number}",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String} Block, or inverse block if specified and falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "ifOdd": {
            "name": "ifOdd",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 332
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 306,
              "end": 308,
              "raw": "helpers.ifOdd = function(val, options) {\n  return isOdd(val) ? options.fn(this) : options.inverse(this);\n};",
              "params": [
                "val",
                "options"
              ]
            },
            "comment": {
              "start": 288,
              "end": 304,
              "raw": "*\n * Block helper that renders a block if `value` is **an odd number**.\n * If an inverse block is specified it will be rendered when falsy.\n *\n * ```handlebars\n * {{#ifOdd value}}\n *   render A\n * {{else}}\n *   render B\n * {{/ifOdd}}\n * ```\n * @param  {Object} `value`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders a block if `value` is **an odd number**.",
                "If an inverse block is specified it will be rendered when falsy.",
                "",
                "```handlebars",
                "{{#ifOdd value}}",
                "render A",
                "{{else}}",
                "render B",
                "{{/ifOdd}}",
                "```",
                "@param  {Object} `value`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String} Block, or inverse block if specified and falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "is": {
            "name": "is",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 344
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 323,
              "end": 332,
              "raw": "helpers.is = function(a, b, options) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  if (a === b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "a",
                "b",
                "options"
              ]
            },
            "comment": {
              "start": 310,
              "end": 321,
              "raw": "*\n * Block helper that renders a block if `a` is **equal to** `b`.\n * If an inverse block is specified it will be rendered when falsy.\n *\n * @name .is\n * @param {any} `a`\n * @param {any} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders a block if `a` is **equal to** `b`.",
                "If an inverse block is specified it will be rendered when falsy.",
                "",
                "@name .is",
                "@param {any} `a`",
                "@param {any} `b`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "isnt": {
            "name": "isnt",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 361
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 347,
              "end": 356,
              "raw": "helpers.isnt = function(a, b, options) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  if (a !== b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "a",
                "b",
                "options"
              ]
            },
            "comment": {
              "start": 334,
              "end": 345,
              "raw": "*\n * Block helper that renders a block if `a` is **not equal to** `b`.\n * If an inverse block is specified it will be rendered when falsy.\n *\n * @name .isnt\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders a block if `a` is **not equal to** `b`.",
                "If an inverse block is specified it will be rendered when falsy.",
                "",
                "@name .isnt",
                "@param {String} `a`",
                "@param {String} `b`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "lt": {
            "name": "lt",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 378
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 373,
              "end": 382,
              "raw": "helpers.lt = function(a, b, options) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  if (a < b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "a",
                "b",
                "options"
              ]
            },
            "comment": {
              "start": 358,
              "end": 371,
              "raw": "*\n * Block helper that renders a block if `a` is **less than** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @name .lt\n * @param {Object} `context`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders a block if `a` is **less than** `b`.",
                "",
                "If an inverse block is specified it will be rendered when falsy.",
                "You may optionally use the `compare=\"\"` hash argument for the",
                "second value.",
                "",
                "@name .lt",
                "@param {Object} `context`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String} Block, or inverse block if specified and falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "lte": {
            "name": "lte",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 405
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 401,
              "end": 410,
              "raw": "helpers.lte = function(a, b, options) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  if (a <= b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "a",
                "b",
                "options"
              ]
            },
            "comment": {
              "start": 384,
              "end": 399,
              "raw": "*\n * Block helper that renders a block if `a` is **less than or\n * equal to** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @name .lte\n * @param {Sring} `a`\n * @param {Sring} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders a block if `a` is **less than or",
                "equal to** `b`.",
                "",
                "If an inverse block is specified it will be rendered when falsy.",
                "You may optionally use the `compare=\"\"` hash argument for the",
                "second value.",
                "",
                "@name .lte",
                "@param {Sring} `a`",
                "@param {Sring} `b`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String} Block, or inverse block if specified and falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "neither": {
            "name": "neither",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 440
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 426,
              "end": 431,
              "raw": "helpers.neither = function(a, b, options) {\n  if (!a && !b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "a",
                "b",
                "options"
              ]
            },
            "comment": {
              "start": 412,
              "end": 424,
              "raw": "*\n * Block helper that renders a block if **neither of** the given values\n * are truthy. If an inverse block is specified it will be rendered\n * when falsy.\n *\n * @name .neither\n * @param {any} `a`\n * @param {any} `b`\n * @param `options` Handlebars options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders a block if **neither of** the given values",
                "are truthy. If an inverse block is specified it will be rendered",
                "when falsy.",
                "",
                "@name .neither",
                "@param {any} `a`",
                "@param {any} `b`",
                "@param `options` Handlebars options object",
                "@return {String} Block, or inverse block if specified and falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "or": {
            "name": "or",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 452
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 447,
              "end": 452,
              "raw": "helpers.or = function(a, b, options) {\n  if (a || b) {\n    return options.fn(this);\n  }\n  return options.inverse(this);\n};",
              "params": [
                "a",
                "b",
                "options"
              ]
            },
            "comment": {
              "start": 433,
              "end": 445,
              "raw": "*\n * Block helper that renders a block if **either of** the given values\n * is truthy. If an inverse block is specified it will be rendered\n * when falsy.\n *\n * @name .or\n * @param {any} `a`\n * @param {any} `b`\n * @param `options` Handlebars options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders a block if **either of** the given values",
                "is truthy. If an inverse block is specified it will be rendered",
                "when falsy.",
                "",
                "@name .or",
                "@param {any} `a`",
                "@param {any} `b`",
                "@param `options` Handlebars options object",
                "@return {String} Block, or inverse block if specified and falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "unlessEq": {
            "name": "unlessEq",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 464
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 467,
              "end": 472,
              "raw": "helpers.unlessEq = function(context, options) {\n  if (context === options.hash.compare) {\n    return options.inverse(this);\n  }\n  return options.fn(this);\n};",
              "params": [
                "context",
                "options"
              ]
            },
            "comment": {
              "start": 454,
              "end": 465,
              "raw": "*\n * Block helper that always renders the inverse block **unless `a` is\n * is equal to `b`**.\n *\n * @name .unlessEq\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Inverse block by default, or block if falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that always renders the inverse block **unless `a` is",
                "is equal to `b`**.",
                "",
                "@name .unlessEq",
                "@param {String} `a`",
                "@param {String} `b`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String} Inverse block by default, or block if falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "unlessGt": {
            "name": "unlessGt",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 475
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 486,
              "end": 491,
              "raw": "helpers.unlessGt = function(context, options) {\n  if (context > options.hash.compare) {\n    return options.inverse(this);\n  }\n  return options.fn(this);\n};",
              "params": [
                "context",
                "options"
              ]
            },
            "comment": {
              "start": 474,
              "end": 484,
              "raw": "*\n * Block helper that always renders the inverse block **unless `a` is\n * is greater than `b`**.\n *\n * @name .unlessGt\n * @param {Object} `context`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Inverse block by default, or block if falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that always renders the inverse block **unless `a` is",
                "is greater than `b`**.",
                "",
                "@name .unlessGt",
                "@param {Object} `context`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String} Inverse block by default, or block if falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "unlessLt": {
            "name": "unlessLt",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 486
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 505,
              "end": 510,
              "raw": "helpers.unlessLt = function(context, options) {\n  if (context < options.hash.compare) {\n    return options.inverse(this);\n  }\n  return options.fn(this);\n};",
              "params": [
                "context",
                "options"
              ]
            },
            "comment": {
              "start": 493,
              "end": 503,
              "raw": "*\n * Block helper that always renders the inverse block **unless `a` is\n * is less than `b`**.\n *\n * @name .unlessLt\n * @param {Object} `context`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that always renders the inverse block **unless `a` is",
                "is less than `b`**.",
                "",
                "@name .unlessLt",
                "@param {Object} `context`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String} Block, or inverse block if specified and falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "unlessGteq": {
            "name": "unlessGteq",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 497
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 524,
              "end": 529,
              "raw": "helpers.unlessGteq = function(context, options) {\n  if (context >= options.hash.compare) {\n    return options.inverse(this);\n  }\n  return options.fn(this);\n};",
              "params": [
                "context",
                "options"
              ]
            },
            "comment": {
              "start": 512,
              "end": 522,
              "raw": "*\n * Block helper that always renders the inverse block **unless `a` is\n * is greater than or equal to `b`**.\n *\n * @name .unlessGteq\n * @param {Object} `context`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that always renders the inverse block **unless `a` is",
                "is greater than or equal to `b`**.",
                "",
                "@name .unlessGteq",
                "@param {Object} `context`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String} Block, or inverse block if specified and falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          },
          "unlessLteq": {
            "name": "unlessLteq",
            "path": "lib/comparison.js",
            "test": {
              "path": "test/comparison.js",
              "code": {
                "start": 512
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 543,
              "end": 548,
              "raw": "helpers.unlessLteq = function(context, options) {\n  if (context <= options.hash.compare) {\n    return options.inverse(this);\n  }\n  return options.fn(this);\n};",
              "params": [
                "context",
                "options"
              ]
            },
            "comment": {
              "start": 531,
              "end": 541,
              "raw": "*\n * Block helper that always renders the inverse block **unless `a` is\n * is less than or equal to `b`**.\n *\n * @name .unlessLteq\n * @param {Object} `context`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that always renders the inverse block **unless `a` is",
                "is less than or equal to `b`**.",
                "",
                "@name .unlessLteq",
                "@param {Object} `context`",
                "@param {Object} `options` Handlebars provided options object",
                "@return {String} Block, or inverse block if specified and falsey.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "comparison"
            }
          }
        },
        "codepath": "lib/comparison.js",
        "count": 21
      },
      "missingdocs": []
    },
    "date": {
      "name": "date",
      "path": "lib/date.js",
      "tests": "test/date.js",
      "data": {
        "methods": {
          "moment": {
            "name": "moment",
            "path": "lib/date.js",
            "test": {
              "path": "test/date.js",
              "code": {}
            },
            "stats": {
              "isModule": true,
              "isBlockHelper": false
            },
            "code": {
              "start": 14,
              "end": 14,
              "raw": "helpers.moment = require('helper-date');",
              "params": null
            },
            "comment": {
              "start": 9,
              "end": 12,
              "raw": "*\n * Expose `moment` helper\n * @api public\n ",
              "lines": [
                "",
                "Expose `moment` helper",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "date"
            }
          }
        },
        "codepath": "lib/date.js",
        "count": 1
      },
      "missingdocs": []
    },
    "fs": {
      "name": "fs",
      "path": "lib/fs.js",
      "tests": "test/fs.js",
      "data": {
        "methods": {
          "fileSize": {
            "name": "fileSize",
            "path": "lib/fs.js",
            "test": {
              "path": "test/fs.js",
              "code": {
                "start": 9
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 26,
              "end": 52,
              "raw": "helpers.fileSize = function(num) {\n  var bytes = parseInt(num, 10);\n\n  if (!isNumber(bytes)) {\n    console.error('helper {{fileSize}} cannot parse: \"' + num + '\"');\n    return num.toString(); // Graceful degradation\n  }\n\n  // KB is technically a Kilobit, but it seems more readable.\n  var metric = ['byte', 'bytes', 'KB', 'MB', 'GB'];\n\n  var res;\n  if (bytes === 0) {\n    return '0 bytes';\n  } else {\n    // Base 1000 (rather than 1024) matches Mac OS X\n    res = Math.floor(Math.log(bytes) / Math.log(1000));\n\n    // No decimals for anything smaller than 1 MB\n    num = (bytes / Math.pow(1000, Math.floor(res))).toFixed(res < 2 ? 0 : 1);\n\n    if (bytes === 1) {\n      res = -1; // special case: 1 byte (singular)\n    }\n  }\n  return num + ' ' + metric[res + 1];\n};",
              "params": [
                "num"
              ]
            },
            "comment": {
              "start": 12,
              "end": 24,
              "raw": "*\n * Converts bytes into a nice representation with unit.\n *\n * **Examples:**\n *\n *   - `13661855 => 13.7 MB`\n *   - `825399 => 825 KB`\n *   - `1396 => 1 KB`\n *\n * @param {String} `value`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Converts bytes into a nice representation with unit.",
                "",
                "Examples:**",
                "",
                "- `13661855 => 13.7 MB`",
                "- `825399 => 825 KB`",
                "- `1396 => 1 KB`",
                "",
                "@param {String} `value`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "fs"
            }
          },
          "read": {
            "name": "read",
            "path": "lib/fs.js",
            "test": {
              "path": "test/fs.js",
              "code": {
                "start": 48
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 62,
              "end": 64,
              "raw": "helpers.read = function(filepath) {\n  return fs.readFileSync(filepath, 'utf8');\n};",
              "params": [
                "filepath"
              ]
            },
            "comment": {
              "start": 54,
              "end": 60,
              "raw": "*\n * Read a file from the file system.\n *\n * @param {String} `filepath`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Read a file from the file system.",
                "",
                "@param {String} `filepath`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "fs"
            }
          }
        },
        "codepath": "lib/fs.js",
        "count": 2
      },
      "missingdocs": []
    },
    "html": {
      "name": "html",
      "path": "lib/html.js",
      "tests": "test/html.js",
      "data": {
        "methods": {
          "css": {
            "name": "css",
            "path": "lib/html.js",
            "test": {
              "path": "test/html.js",
              "code": {
                "start": 12
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 26,
              "end": 52,
              "raw": "helpers.css = function(array, options) {\n  if (arguments.length < 2) {\n    options = array;\n    array = undefined;\n  }\n\n  var styles = utils.arrayify(array || []);\n  var assets = '';\n\n  if (this && this.options) {\n    assets = this.options.assets || '';\n  }\n\n  if (options.hash.href) {\n    styles = utils.arrayify(options.hash.href);\n  }\n\n  return styles.map(function(item) {\n    var ext = path.extname(item);\n    var fp = path.join(assets, item);\n\n    if (ext === '.less') {\n      return '<link type=\"text/css\" rel=\"stylesheet/less\" href=\"' + fp + '\">';\n    }\n    return '<link type=\"text/css\" rel=\"stylesheet\" href=\"' + fp + '\">';\n  }).join('\\n');\n};",
              "params": [
                "array",
                "options"
              ]
            },
            "comment": {
              "start": 17,
              "end": 24,
              "raw": "*\n * Add an array of `<link>` tags. Automatically resolves\n * relative paths to `options.assets` if passed on the context.\n *\n * @param  {Object} `context`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Add an array of `<link>` tags. Automatically resolves",
                "relative paths to `options.assets` if passed on the context.",
                "",
                "@param  {Object} `context`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "html"
            }
          },
          "js": {
            "name": "js",
            "path": "lib/html.js",
            "test": {
              "path": "test/html.js",
              "code": {
                "start": 55
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 67,
              "end": 83,
              "raw": "helpers.js = function(context) {\n  if (typeOf(context) === 'object') {\n    var attr = html.toAttributes(context.hash);\n    return '<script' + attr + '></script>';\n  }\n\n  if (typeOf(context) === 'string') {\n    return '<script src=\"' + context + '\"></script>';\n  }\n\n  context = utils.arrayify(context);\n  return context.map(function(fp) {\n    return (path.extname(fp) === '.coffee')\n      ? tag('script', {type: 'text/coffeescript', src: fp})\n      : tag('script', {src: fp}, true);\n  }).join('\\n');\n};",
              "params": [
                "context"
              ]
            },
            "comment": {
              "start": 54,
              "end": 65,
              "raw": "*\n * Generate one or more `<script></script>` tags with paths/urls to\n * javascript or coffeescript files.\n *\n * ```handlebars\n * {{js scripts}}\n * ```\n *\n * @param  {Object} `context`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Generate one or more `<script></script>` tags with paths/urls to",
                "javascript or coffeescript files.",
                "",
                "```handlebars",
                "{{js scripts}}",
                "```",
                "",
                "@param  {Object} `context`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "html"
            }
          },
          "ul": {
            "name": "ul",
            "path": "lib/html.js",
            "test": {
              "path": "test/html.js",
              "code": {
                "start": 84
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 95,
              "end": 99,
              "raw": "helpers.ul = function(context, options) {\n  return ('<ul ' + (parseAttr(options.hash)) + '>') + context.map(function(item) {\n    return '<li>' + (options.fn(item)) + '</li>';\n  }).join('\\n') + '</ul>';\n};",
              "params": [
                "context",
                "options"
              ]
            },
            "comment": {
              "start": 85,
              "end": 93,
              "raw": "*\n * Block helper for creating unordered lists (`<ul></ul>`)\n *\n * @param  {Object} `context`\n * @param  {Object} `options`\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper for creating unordered lists (`<ul></ul>`)",
                "",
                "@param  {Object} `context`",
                "@param  {Object} `options`",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "html"
            }
          },
          "ol": {
            "name": "ol",
            "path": "lib/html.js",
            "test": {
              "path": "test/html.js",
              "code": {
                "start": 91
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 111,
              "end": 115,
              "raw": "helpers.ol = function(context, options) {\n  return ('<ol ' + (parseAttr(options.hash)) + '>') + context.map(function(item) {\n    return '<li>' + (options.fn(item)) + '</li>';\n  }).join('\\n') + '</ol>';\n};",
              "params": [
                "context",
                "options"
              ]
            },
            "comment": {
              "start": 101,
              "end": 109,
              "raw": "*\n * Block helper for creating ordered lists  (`<ol></ol>`)\n *\n * @param  {Object} `context`\n * @param  {Object} `options`\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper for creating ordered lists  (`<ol></ol>`)",
                "",
                "@param  {Object} `context`",
                "@param  {Object} `options`",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "html"
            }
          },
          "thumbnailImage": {
            "name": "thumbnailImage",
            "path": "lib/html.js",
            "test": {
              "path": "test/html.js",
              "code": {
                "start": 98
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 130,
              "end": 172,
              "raw": "helpers.thumbnailImage = function (context) {\n  var figure = '';\n  var image = '';\n\n  var link = context.full || false;\n  var imageAttributes = {\n    alt: context.alt,\n    src: context.thumbnail,\n    width: context.size.width,\n    height: context.size.height\n  };\n\n  var figureAttributes = { id: 'image-' + context.id };\n  var linkAttributes = { href: link, rel: 'thumbnail' };\n\n  if (context.classes) {\n    if (context.classes.image) {\n      imageAttributes.class = context.classes.image.join(' ');\n    }\n    if (context.classes.figure) {\n      figureAttributes.class = context.classes.figure.join(' ');\n    }\n    if (context.classes.link) {\n      linkAttributes.class = context.classes.link.join(' ');\n    }\n  }\n\n  figure += '<figure ' + parseAttr(figureAttributes) + '>\\n';\n  image += '<img ' + parseAttr(imageAttributes) + '>\\n';\n\n  if (link) {\n    figure += '<a ' + parseAttr(linkAttributes) + '>\\n' + image + '</a>\\n';\n  } else {\n    figure += image;\n  }\n\n  if (context.caption) {\n    figure += '<figcaption>' + context.caption + '</figcaption>\\n';\n  }\n\n  figure += '</figure>';\n  return figure;\n};",
              "params": [
                "context"
              ]
            },
            "comment": {
              "start": 117,
              "end": 128,
              "raw": "*\n * Returns a `<figure>` with a thumbnail linked to a full picture\n *\n * @param  {Object} `context` Object with values/attributes to add to the generated elements:\n * @param {String} `context.alt`\n * @param {String} `context.src`\n * @param {Number} `context.width`\n * @param {Number} `context.height`\n * @return {String} HTML `<figure>` element with image and optional caption/link.\n * @contributor: Marie Hogebrandt <https://github.com/Melindrea>\n * @api public\n ",
              "lines": [
                "",
                "Returns a `<figure>` with a thumbnail linked to a full picture",
                "",
                "@param  {Object} `context` Object with values/attributes to add to the generated elements:",
                "@param {String} `context.alt`",
                "@param {String} `context.src`",
                "@param {Number} `context.width`",
                "@param {Number} `context.height`",
                "@return {String} HTML `<figure>` element with image and optional caption/link.",
                "@contributor: Marie Hogebrandt <https://github.com/Melindrea>",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "html"
            }
          }
        },
        "codepath": "lib/html.js",
        "count": 5
      },
      "missingdocs": []
    },
    "i18n": {
      "name": "i18n",
      "path": "lib/i18n.js",
      "tests": "test/i18n.js",
      "data": {
        "methods": {
          "i18n": {
            "name": "i18n",
            "path": "lib/i18n.js",
            "test": {
              "path": "test/i18n.js",
              "code": {
                "start": 10
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 24,
              "end": 59,
              "raw": "helpers.i18n = function(prop, context, options) {\n  if (utils.isOptions(context)) {\n    options = context;\n    context = {};\n  }\n\n  if (typeof prop !== 'string') {\n    throw new Error('{{i18n}} helper expected \"key\" to be a string');\n  }\n\n  var opts = merge({}, this, options.hash);\n\n  // account for `options` being passed on the context\n  if (opts.options) {\n    opts = merge({}, opts, opts.options);\n    delete opts.options;\n  }\n\n  var lang = opts.language || opts.lang;\n\n  if (typeof lang !== 'string') {\n    throw new Error('{{i18n}} helper expected \"language\" parameter to be a string');\n  }\n\n  var value = get(opts, lang);\n  if (typeof value === 'undefined') {\n    throw new Error('{{i18n}} helper cannot find language \"' + lang + '\"');\n  }\n\n  var result = get(value, prop);\n  if (typeof result === 'undefined') {\n    throw new Error('{{i18n}} helper cannot find property \"' + prop + '\" for language \"' + lang + '\"');\n  }\n\n  return result;\n};",
              "params": [
                "prop",
                "context",
                "options"
              ]
            },
            "comment": {
              "start": 13,
              "end": 22,
              "raw": "*\n * i18n helper. See [button-i18n](https://github.com/assemble/buttons)\n * for a working example.\n *\n * @contributor Laurent Goderre <https://github.com/LaurentGoderrre>\n * @param  {String} `key`\n * @param  {Object} `options`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "i18n helper. See [button-i18n](https://github.com/assemble/buttons)",
                "for a working example.",
                "",
                "@contributor Laurent Goderre <https://github.com/LaurentGoderrre>",
                "@param  {String} `key`",
                "@param  {Object} `options`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "i18n"
            }
          }
        },
        "codepath": "lib/i18n.js",
        "count": 1
      },
      "missingdocs": []
    },
    "inflection": {
      "name": "inflection",
      "path": "lib/inflection.js",
      "tests": "test/inflection.js",
      "data": {
        "methods": {
          "inflect": {
            "name": "inflect",
            "path": "lib/inflection.js",
            "test": {
              "path": "test/inflection.js",
              "code": {
                "start": 8
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 22,
              "end": 35,
              "raw": "helpers.inflect = function(count, singular, plural, include) {\n  var word = count > 1 || count === 0\n    ? plural\n    : singular;\n\n  if (utils.isUndefined(include) || include === false) {\n    return word;\n  } else {\n    return ''\n      + count\n      + ' '\n      + word;\n  }\n};",
              "params": [
                "count",
                "singular",
                "plural",
                "include"
              ]
            },
            "comment": {
              "start": 12,
              "end": 20,
              "raw": "*\n * @name .inflect\n * @param {type} `count`\n * @param {type} `singular`\n * @param {type} `plural`\n * @param {type} `include`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "@name .inflect",
                "@param {type} `count`",
                "@param {type} `singular`",
                "@param {type} `plural`",
                "@param {type} `include`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "inflection"
            }
          },
          "ordinalize": {
            "name": "ordinalize",
            "path": "lib/inflection.js",
            "test": {
              "path": "test/inflection.js",
              "code": {
                "start": 21
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 56,
              "end": 74,
              "raw": "helpers.ordinalize = function(val) {\n  var num = Math.abs(Math.round(val));\n  var res;\n\n  if (res = num % 100, indexOf.call([11, 12, 13], res) >= 0) {\n    return '' + val + 'th';\n  }\n\n  switch (num % 10) {\n    case 1:\n      return '' + val + 'st';\n    case 2:\n      return '' + val + 'nd';\n    case 3:\n      return '' + val + 'rd';\n    default:\n      return '' + val + 'th';\n  }\n};",
              "params": [
                "val"
              ]
            },
            "comment": {
              "start": 37,
              "end": 54,
              "raw": "*\n * Returns an ordinalized number (as a string).\n *\n * ```handlebars\n * {{ordinalize 1}}\n * //=> '1st'\n * {{ordinalize 21}}\n * //=> '21st'\n * {{ordinalize 29}}\n * //=> '29th'\n * {{ordinalize 22}}\n * //=> '22nd'\n * ```\n *\n * @param {String} `val` The value to ordinalize.\n * @return {String} The ordinalized number\n * @api public\n ",
              "lines": [
                "",
                "Returns an ordinalized number (as a string).",
                "",
                "```handlebars",
                "{{ordinalize 1}}",
                "//=> '1st'",
                "{{ordinalize 21}}",
                "//=> '21st'",
                "{{ordinalize 29}}",
                "//=> '29th'",
                "{{ordinalize 22}}",
                "//=> '22nd'",
                "```",
                "",
                "@param {String} `val` The value to ordinalize.",
                "@return {String} The ordinalized number",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "inflection"
            }
          }
        },
        "codepath": "lib/inflection.js",
        "count": 2
      },
      "missingdocs": []
    },
    "logging": {
      "name": "logging",
      "path": "lib/logging.js",
      "tests": "test/logging.js",
      "data": {
        "methods": {},
        "codepath": "lib/logging.js",
        "count": 0
      },
      "missingdocs": []
    },
    "markdown": {
      "name": "markdown",
      "path": "lib/markdown.js",
      "tests": "test/markdown.js",
      "data": {
        "methods": {
          "markdown": {
            "name": "markdown",
            "path": "lib/markdown.js",
            "test": {
              "path": "test/markdown.js",
              "code": {}
            },
            "stats": {
              "isModule": true,
              "isBlockHelper": false
            },
            "code": {
              "start": 14,
              "end": 14,
              "raw": "helpers.markdown = require('helper-markdown');",
              "params": null
            },
            "comment": {
              "start": 9,
              "end": 12,
              "raw": "*\n * Expose `{{markdown}}` block helper\n * @api public\n ",
              "lines": [
                "",
                "Expose `{{markdown}}` block helper",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "markdown"
            }
          },
          "md": {
            "name": "md",
            "path": "lib/markdown.js",
            "test": {
              "path": "test/markdown.js",
              "code": {}
            },
            "stats": {
              "isModule": true,
              "isBlockHelper": false
            },
            "code": {
              "start": 21,
              "end": 21,
              "raw": "helpers.md = require('helper-md');",
              "params": null
            },
            "comment": {
              "start": 16,
              "end": 19,
              "raw": "*\n * Expose `{{md}}` helper\n * @api public\n ",
              "lines": [
                "",
                "Expose `{{md}}` helper",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "markdown"
            }
          }
        },
        "codepath": "lib/markdown.js",
        "count": 2
      },
      "missingdocs": []
    },
    "math": {
      "name": "math",
      "path": "lib/math.js",
      "tests": "test/math.js",
      "data": {
        "methods": {
          "add": {
            "name": "add",
            "path": "lib/math.js",
            "test": {
              "path": "test/math.js",
              "code": {
                "start": 9
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 20,
              "end": 22,
              "raw": "helpers.add = function(a, b) {\n  return a + b;\n};",
              "params": [
                "a",
                "b"
              ]
            },
            "comment": {
              "start": 12,
              "end": 18,
              "raw": "*\n * Return the product of `a` plus `b`.\n *\n * @param {Number} `a`\n * @param {Number} `b`\n * @api public\n ",
              "lines": [
                "",
                "Return the product of `a` plus `b`.",
                "",
                "@param {Number} `a`",
                "@param {Number} `b`",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "math"
            }
          },
          "subtract": {
            "name": "subtract",
            "path": "lib/math.js",
            "test": {
              "path": "test/math.js",
              "code": {
                "start": 28
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 31,
              "end": 33,
              "raw": "helpers.subtract = function(a, b) {\n  return a - b;\n};",
              "params": [
                "a",
                "b"
              ]
            },
            "comment": {
              "start": 24,
              "end": 29,
              "raw": "*\n * Return the product of `a` minus `b`.\n *\n * @param {Number} a\n * @api public\n ",
              "lines": [
                "",
                "Return the product of `a` minus `b`.",
                "",
                "@param {Number} a",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "math"
            }
          },
          "divide": {
            "name": "divide",
            "path": "lib/math.js",
            "test": {
              "path": "test/math.js",
              "code": {
                "start": 35
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 43,
              "end": 45,
              "raw": "helpers.divide = function(a, b) {\n  return a / b;\n};",
              "params": [
                "a",
                "b"
              ]
            },
            "comment": {
              "start": 35,
              "end": 41,
              "raw": "*\n * Divide `a` by `b`\n *\n * @param {Number} `a` numerator\n * @param {Number} `b` denominator\n * @api public\n ",
              "lines": [
                "",
                "Divide `a` by `b`",
                "",
                "@param {Number} `a` numerator",
                "@param {Number} `b` denominator",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "math"
            }
          },
          "multiply": {
            "name": "multiply",
            "path": "lib/math.js",
            "test": {
              "path": "test/math.js",
              "code": {
                "start": 42
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 55,
              "end": 57,
              "raw": "helpers.multiply = function(a, b) {\n  return a * b;\n};",
              "params": [
                "a",
                "b"
              ]
            },
            "comment": {
              "start": 47,
              "end": 53,
              "raw": "*\n * Multiply `a` by `b`.\n *\n * @param {Number} `a` factor\n * @param {Number} `b` multiplier\n * @api public\n ",
              "lines": [
                "",
                "Multiply `a` by `b`.",
                "",
                "@param {Number} `a` factor",
                "@param {Number} `b` multiplier",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "math"
            }
          },
          "floor": {
            "name": "floor",
            "path": "lib/math.js",
            "test": {
              "path": "test/math.js",
              "code": {
                "start": 49
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 66,
              "end": 68,
              "raw": "helpers.floor = function(value) {\n  return Math.floor(value);\n};",
              "params": [
                "value"
              ]
            },
            "comment": {
              "start": 59,
              "end": 64,
              "raw": "*\n * Get the `Math.floor()` of the given value.\n *\n * @param {Number} `value`\n * @api public\n ",
              "lines": [
                "",
                "Get the `Math.floor()` of the given value.",
                "",
                "@param {Number} `value`",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "math"
            }
          },
          "ceil": {
            "name": "ceil",
            "path": "lib/math.js",
            "test": {
              "path": "test/math.js",
              "code": {
                "start": 56
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 77,
              "end": 79,
              "raw": "helpers.ceil = function(value) {\n  return Math.ceil(value);\n};",
              "params": [
                "value"
              ]
            },
            "comment": {
              "start": 70,
              "end": 75,
              "raw": "*\n * Get the `Math.ceil()` of the given value.\n *\n * @param {Number} `value`\n * @api public\n ",
              "lines": [
                "",
                "Get the `Math.ceil()` of the given value.",
                "",
                "@param {Number} `value`",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "math"
            }
          },
          "round": {
            "name": "round",
            "path": "lib/math.js",
            "test": {
              "path": "test/math.js",
              "code": {
                "start": 63
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 88,
              "end": 90,
              "raw": "helpers.round = function(value) {\n  return Math.round(value);\n};",
              "params": [
                "value"
              ]
            },
            "comment": {
              "start": 81,
              "end": 86,
              "raw": "*\n * Round the given value.\n *\n * @param {Number} `value`\n * @api public\n ",
              "lines": [
                "",
                "Round the given value.",
                "",
                "@param {Number} `value`",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "math"
            }
          },
          "sum": {
            "name": "sum",
            "path": "lib/math.js",
            "test": {
              "path": "test/math.js",
              "code": {
                "start": 70
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 106,
              "end": 116,
              "raw": "helpers.sum = function() {\n  var args = flatten([].concat.apply([], arguments));\n  var i = args.length, sum = 0;\n  while (i--) {\n    if (!isNumber(args[i])) {\n      continue;\n    }\n    sum += (+args[i]);\n  }\n  return sum;\n};",
              "params": []
            },
            "comment": {
              "start": 92,
              "end": 104,
              "raw": "*\n * Returns the sum of all numbers in the given array.\n *\n * ```handlebars\n * {{sum \"[1, 2, 3, 4, 5]\"}}\n * //=> '15'\n * ```\n *\n * @name .sum\n * @param {Array} `array` Array of numbers to add up.\n * @return {Number}\n * @api public\n ",
              "lines": [
                "",
                "Returns the sum of all numbers in the given array.",
                "",
                "```handlebars",
                "{{sum \"[1, 2, 3, 4, 5]\"}}",
                "//=> '15'",
                "```",
                "",
                "@name .sum",
                "@param {Array} `array` Array of numbers to add up.",
                "@return {Number}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "math"
            }
          },
          "avg": {
            "name": "avg",
            "path": "lib/math.js",
            "test": {
              "path": "test/math.js",
              "code": {}
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 132,
              "end": 137,
              "raw": "helpers.avg = function() {\n  var args = flatten([].concat.apply([], arguments));\n  // remove handlebars options object\n  args.pop();\n  return exports.sum(args) / args.length;\n};",
              "params": []
            },
            "comment": {
              "start": 118,
              "end": 130,
              "raw": "*\n * Returns the average of all numbers in the given array.\n *\n * ```handlebars\n * {{avg \"[1, 2, 3, 4, 5]\"}}\n * //=> '3'\n * ```\n *\n * @name .avg\n * @param {Array} `array` Array of numbers to add up.\n * @return {Number}\n * @api public\n ",
              "lines": [
                "",
                "Returns the average of all numbers in the given array.",
                "",
                "```handlebars",
                "{{avg \"[1, 2, 3, 4, 5]\"}}",
                "//=> '3'",
                "```",
                "",
                "@name .avg",
                "@param {Array} `array` Array of numbers to add up.",
                "@return {Number}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "math"
            }
          }
        },
        "codepath": "lib/math.js",
        "count": 9
      },
      "missingdocs": []
    },
    "misc": {
      "name": "misc",
      "path": "lib/misc.js",
      "tests": "test/misc.js",
      "data": {
        "methods": {
          "default": {
            "name": "default",
            "path": "lib/misc.js",
            "test": {
              "path": "test/misc.js",
              "code": {
                "start": 10
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 20,
              "end": 24,
              "raw": "helpers.default = function(value, defaultValue) {\n  return value == null\n    ? defaultValue\n    : value;\n};",
              "params": [
                "value",
                "defaultValue"
              ]
            },
            "comment": {
              "start": 9,
              "end": 18,
              "raw": "*\n * Returns the first value if defined, otherwise the second (\"default\")\n * value is returned.\n *\n * @name .default\n * @param {type} `value`\n * @param {type} `defaultValue`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Returns the first value if defined, otherwise the second (\"default\")",
                "value is returned.",
                "",
                "@name .default",
                "@param {type} `value`",
                "@param {type} `defaultValue`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "misc"
            }
          },
          "noop": {
            "name": "noop",
            "path": "lib/misc.js",
            "test": {
              "path": "test/misc.js",
              "code": {
                "start": 22
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 36,
              "end": 38,
              "raw": "helpers.noop = function(options) {\n  return options.fn(this);\n};",
              "params": [
                "options"
              ]
            },
            "comment": {
              "start": 26,
              "end": 34,
              "raw": "*\n * Block helper that renders the block without taking any arguments.\n *\n * @name .noop\n * @param {type} `options`\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that renders the block without taking any arguments.",
                "",
                "@name .noop",
                "@param {type} `options`",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "misc"
            }
          },
          "withHash": {
            "name": "withHash",
            "path": "lib/misc.js",
            "test": {
              "path": "test/misc.js",
              "code": {
                "start": 29
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 50,
              "end": 56,
              "raw": "helpers.withHash = function(options) {\n  if (options.hash && Object.keys(options.hash).length) {\n    return options.fn(options.hash);\n  } else {\n    return options.inverse(this);\n  }\n};",
              "params": [
                "options"
              ]
            },
            "comment": {
              "start": 40,
              "end": 48,
              "raw": "*\n * Block helper that builds the context for the block\n * from the options hash.\n *\n * @param {Object} `options` Handlebars provided options object.\n * @contributor Vladimir Kuznetsov <https://github.com/mistakster>\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that builds the context for the block",
                "from the options hash.",
                "",
                "@param {Object} `options` Handlebars provided options object.",
                "@contributor Vladimir Kuznetsov <https://github.com/mistakster>",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "misc"
            }
          }
        },
        "codepath": "lib/misc.js",
        "count": 3
      },
      "missingdocs": []
    },
    "number": {
      "name": "number",
      "path": "lib/number.js",
      "tests": "test/number.js",
      "data": {
        "methods": {
          "addCommas": {
            "name": "addCommas",
            "path": "lib/number.js",
            "test": {
              "path": "test/number.js",
              "code": {
                "start": 63
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 19,
              "end": 21,
              "raw": "helpers.addCommas = function(num) {\n  return num.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,');\n};",
              "params": [
                "num"
              ]
            },
            "comment": {
              "start": 11,
              "end": 17,
              "raw": "*\n * Add commas to numbers\n *\n * @param {Number} `num`\n * @return {Number}\n * @api public\n ",
              "lines": [
                "",
                "Add commas to numbers",
                "",
                "@param {Number} `num`",
                "@return {Number}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "number"
            }
          },
          "phoneNumber": {
            "name": "phoneNumber",
            "path": "lib/number.js",
            "test": {
              "path": "test/number.js",
              "code": {
                "start": 9
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 32,
              "end": 38,
              "raw": "helpers.phoneNumber = function(num) {\n  num = num.toString();\n\n  return '(' + num.substr(0, 3) + ') '\n    + num.substr(3, 3) + '-'\n    + num.substr(6, 4);\n};",
              "params": [
                "num"
              ]
            },
            "comment": {
              "start": 23,
              "end": 30,
              "raw": "*\n * Convert a string or number to a formatted phone number.\n *\n * @param  {Number|String} `num` The phone number to format, e.g. `8005551212`\n * @return {Number} Formatted phone number: `(800) 555-1212`\n * @source http://bit.ly/QlPmPr\n * @api public\n ",
              "lines": [
                "",
                "Convert a string or number to a formatted phone number.",
                "",
                "@param  {Number|String} `num` The phone number to format, e.g. `8005551212`",
                "@return {Number} Formatted phone number: `(800) 555-1212`",
                "@source http://bit.ly/QlPmPr",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "number"
            }
          },
          "random": {
            "name": "random",
            "path": "lib/number.js",
            "test": {
              "path": "test/number.js",
              "code": {
                "start": 95
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 50,
              "end": 52,
              "raw": "helpers.random = function(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};",
              "params": [
                "min",
                "max"
              ]
            },
            "comment": {
              "start": 40,
              "end": 48,
              "raw": "*\n * Generate a random number between two values\n *\n * @param  {Number} `min`\n * @param  {Number} `max`\n * @contributor Tim Douglas <https://github.com/timdouglas>\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Generate a random number between two values",
                "",
                "@param  {Number} `min`",
                "@param  {Number} `max`",
                "@contributor Tim Douglas <https://github.com/timdouglas>",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "number"
            }
          },
          "toAbbr": {
            "name": "toAbbr",
            "path": "lib/number.js",
            "test": {
              "path": "test/number.js",
              "code": {
                "start": 70
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 63,
              "end": 83,
              "raw": "helpers.toAbbr = function(number, precision) {\n  if (utils.isUndefined(precision)) {\n    precision = 2;\n  }\n\n  // 2 decimal places => 100, 3 => 1000, etc.\n  precision = Math.pow(10, precision);\n  var abbr = ['k', 'm', 'b', 't', 'q'];\n  var len = abbr.length - 1;\n\n  while (len >= 0) {\n    var size = Math.pow(10, (len + 1) * 3);\n    if (size <= (number + 1)) {\n      number = Math.round(number * precision / size) / precision;\n      number += abbr[len];\n      break;\n    }\n    len--;\n  }\n  return number;\n};",
              "params": [
                "number",
                "precision"
              ]
            },
            "comment": {
              "start": 54,
              "end": 61,
              "raw": "*\n * Abbreviate numbers to the given number of `precision`.\n *\n * @param  {String} `number`\n * @param  {String} `precision`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Abbreviate numbers to the given number of `precision`.",
                "",
                "@param  {String} `number`",
                "@param  {String} `precision`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "number"
            }
          },
          "toExponential": {
            "name": "toExponential",
            "path": "lib/number.js",
            "test": {
              "path": "test/number.js",
              "code": {
                "start": 38
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 93,
              "end": 98,
              "raw": "helpers.toExponential = function(number, fractions) {\n  if (utils.isUndefined(fractions)) {\n    fractions = 0;\n  }\n  return number.toExponential(fractions);\n};",
              "params": [
                "number",
                "fractions"
              ]
            },
            "comment": {
              "start": 85,
              "end": 91,
              "raw": "*\n * @name .toExponential\n * @param {type} `number`\n * @param {type} `fractions`\n * @return {Number}\n * @api public\n ",
              "lines": [
                "",
                "@name .toExponential",
                "@param {type} `number`",
                "@param {type} `fractions`",
                "@return {Number}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "number"
            }
          },
          "toFixed": {
            "name": "toFixed",
            "path": "lib/number.js",
            "test": {
              "path": "test/number.js",
              "code": {
                "start": 16
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 108,
              "end": 113,
              "raw": "helpers.toFixed = function(number, precision) {\n  if (utils.isUndefined(precision)) {\n    precision = 0;\n  }\n  return number.toFixed(precision);\n};",
              "params": [
                "number",
                "precision"
              ]
            },
            "comment": {
              "start": 100,
              "end": 106,
              "raw": "*\n * @name .toFixed\n * @param {type} `number`\n * @param {type} `precision`\n * @return {Number}\n * @api public\n ",
              "lines": [
                "",
                "@name .toFixed",
                "@param {type} `number`",
                "@param {type} `precision`",
                "@return {Number}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "number"
            }
          },
          "toFloat": {
            "name": "toFloat",
            "path": "lib/number.js",
            "test": {
              "path": "test/number.js",
              "code": {
                "start": 56
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 121,
              "end": 123,
              "raw": "helpers.toFloat = function(number) {\n  return parseFloat(number);\n};",
              "params": [
                "number"
              ]
            },
            "comment": {
              "start": 115,
              "end": 119,
              "raw": "*\n * @param {Number} `number`\n * @return {Number}\n * @api public\n ",
              "lines": [
                "",
                "@param {Number} `number`",
                "@return {Number}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "number"
            }
          },
          "toInt": {
            "name": "toInt",
            "path": "lib/number.js",
            "test": {
              "path": "test/number.js",
              "code": {
                "start": 49
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 131,
              "end": 133,
              "raw": "helpers.toInt = function(number) {\n  return parseInt(number, 10);\n};",
              "params": [
                "number"
              ]
            },
            "comment": {
              "start": 125,
              "end": 129,
              "raw": "*\n * @param {Number} `number`\n * @return {Number}\n * @api public\n ",
              "lines": [
                "",
                "@param {Number} `number`",
                "@return {Number}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "number"
            }
          },
          "toPrecision": {
            "name": "toPrecision",
            "path": "lib/number.js",
            "test": {
              "path": "test/number.js",
              "code": {
                "start": 27
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 141,
              "end": 146,
              "raw": "helpers.toPrecision = function(number, precision) {\n  if (utils.isUndefined(precision)) {\n    precision = 1;\n  }\n  return number.toPrecision(precision);\n};",
              "params": [
                "number",
                "precision"
              ]
            },
            "comment": {
              "start": 135,
              "end": 139,
              "raw": "*\n * @param {Number} `number`\n * @return {Number}\n * @api public\n ",
              "lines": [
                "",
                "@param {Number} `number`",
                "@return {Number}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "number"
            }
          }
        },
        "codepath": "lib/number.js",
        "count": 9
      },
      "missingdocs": []
    },
    "object": {
      "name": "object",
      "path": "lib/object.js",
      "tests": "test/object.js",
      "data": {
        "methods": {
          "extend": {
            "name": "extend",
            "path": "lib/object.js",
            "test": {
              "path": "test/object.js",
              "code": {
                "start": 14
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 27,
              "end": 51,
              "raw": "helpers.extend = function(/*objects*/) {\n  var args = [].slice.call(arguments);\n  var last = args[args.length - 1];\n\n  if (last && typeof last === 'object' && last.hash) {\n    last = last.hash;\n    args.pop(); // remove handlebars options object\n    args.push(last);\n  }\n\n  var len = args.length;\n  var context = {};\n  var i = -1;\n\n  while (++i < len) {\n    var obj = args[i];\n    // skip over sparse arguments\n    if (obj != null) {\n      forOwn(obj, function(val, key) {\n        this[key] = val;\n      }, context);\n    }\n  }\n  return context;\n};",
              "params": []
            },
            "comment": {
              "start": 18,
              "end": 25,
              "raw": "*\n * Extend the context with the properties of other objects.\n * A shallow merge is performed to avoid mutating the context.\n *\n * @param {Object} `objects` One or more objects to extend.\n * @return {Object}\n * @api public\n ",
              "lines": [
                "",
                "Extend the context with the properties of other objects.",
                "A shallow merge is performed to avoid mutating the context.",
                "",
                "@param {Object} `objects` One or more objects to extend.",
                "@return {Object}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "object"
            }
          },
          "forIn": {
            "name": "forIn",
            "path": "lib/object.js",
            "test": {
              "path": "test/object.js",
              "code": {
                "start": 32
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 65,
              "end": 78,
              "raw": "helpers.forIn = function(obj, options) {\n  if (!utils.isOptions(options)) {\n    return obj.inverse(this);\n  }\n\n  var data = createFrame(options, options.hash);\n  var result = '';\n\n  for (var key in obj) {\n    data.key = key;\n    result += options.fn(obj[key], {data: data});\n  }\n  return result;\n};",
              "params": [
                "obj",
                "options"
              ]
            },
            "comment": {
              "start": 53,
              "end": 63,
              "raw": "*\n * Block helper that iterates over the properties of\n * an object, exposing each key and value on the context.\n *\n * @name .forIn\n * @param {Object} `context`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that iterates over the properties of",
                "an object, exposing each key and value on the context.",
                "",
                "@name .forIn",
                "@param {Object} `context`",
                "@param {Object} `options`",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "object"
            }
          },
          "forOwn": {
            "name": "forOwn",
            "path": "lib/object.js",
            "test": {
              "path": "test/object.js",
              "code": {
                "start": 49
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 92,
              "end": 107,
              "raw": "helpers.forOwn = function(obj, options) {\n  if (!utils.isOptions(options)) {\n    return obj.inverse(this);\n  }\n\n  var data = createFrame(options, options.hash);\n  var result = '';\n\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      data.key = key;\n      result += options.fn(obj[key], {data: data});\n    }\n  }\n  return result;\n};",
              "params": [
                "obj",
                "options"
              ]
            },
            "comment": {
              "start": 80,
              "end": 90,
              "raw": "*\n * Block helper that iterates over the **own** properties of\n * an object, exposing each key and value on the context.\n *\n * @name .forOwn\n * @param {Object} `obj` The object to iterate over.\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that iterates over the **own** properties of",
                "an object, exposing each key and value on the context.",
                "",
                "@name .forOwn",
                "@param {Object} `obj` The object to iterate over.",
                "@param {Object} `options`",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "object"
            }
          },
          "get": {
            "name": "get",
            "path": "lib/object.js",
            "test": {
              "path": "test/object.js",
              "code": {
                "start": 76
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 122,
              "end": 128,
              "raw": "helpers.get = function (prop, context, options) {\n  var val = get(context, prop);\n  if (options && options.fn) {\n    return val ? options.fn(val) : options.inverse(context);\n  }\n  return val;\n};",
              "params": [
                "prop",
                "context",
                "options"
              ]
            },
            "comment": {
              "start": 109,
              "end": 120,
              "raw": "*\n * Use property paths (`a.b.c`) to get a value or nested value from\n * the context. Works as a regular helper or block helper.\n *\n * @name .get\n * @param {String} `prop` The property to get, optionally using dot notation for nested properties.\n * @param {Object} `context` The context object\n * @param {Object} `options` The handlebars options object, if used as a block helper.\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Use property paths (`a.b.c`) to get a value or nested value from",
                "the context. Works as a regular helper or block helper.",
                "",
                "@name .get",
                "@param {String} `prop` The property to get, optionally using dot notation for nested properties.",
                "@param {Object} `context` The context object",
                "@param {Object} `options` The handlebars options object, if used as a block helper.",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "object"
            }
          },
          "getObject": {
            "name": "getObject",
            "path": "lib/object.js",
            "test": {
              "path": "test/object.js",
              "code": {
                "start": 76
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 144,
              "end": 146,
              "raw": "helpers.getObject = function (prop, context) {\n  return getObject(context, prop);\n};",
              "params": [
                "prop",
                "context"
              ]
            },
            "comment": {
              "start": 130,
              "end": 142,
              "raw": "*\n * Use property paths (`a.b.c`) to get an object from\n * the context. Differs from the `get` helper in that this\n * helper will return the actual object, including the\n * given property key. Also, this helper does not work as a\n * block helper.\n *\n * @name .getObject\n * @param {String} `prop` The property to get, optionally using dot notation for nested properties.\n * @param {Object} `context` The context object\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Use property paths (`a.b.c`) to get an object from",
                "the context. Differs from the `get` helper in that this",
                "helper will return the actual object, including the",
                "given property key. Also, this helper does not work as a",
                "block helper.",
                "",
                "@name .getObject",
                "@param {String} `prop` The property to get, optionally using dot notation for nested properties.",
                "@param {Object} `context` The context object",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "object"
            }
          },
          "hasOwn": {
            "name": "hasOwn",
            "path": "lib/object.js",
            "test": {
              "path": "test/object.js",
              "code": {
                "start": 111
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 163,
              "end": 165,
              "raw": "helpers.hasOwn = function(context, key) {\n  return {}.hasOwnProperty.call(context, key);\n};",
              "params": [
                "context",
                "key"
              ]
            },
            "comment": {
              "start": 148,
              "end": 161,
              "raw": "*\n * Return true if `key` is an own, enumerable property\n * of the given `context` object.\n *\n * ```handlebars\n * {{hasOwn context key}}\n * ```\n *\n * @name .hasOwn\n * @param  {String} `key`\n * @param  {Object} `context` The context object.\n * @return {Boolean}\n * @api public\n ",
              "lines": [
                "",
                "Return true if `key` is an own, enumerable property",
                "of the given `context` object.",
                "",
                "```handlebars",
                "{{hasOwn context key}}",
                "```",
                "",
                "@name .hasOwn",
                "@param  {String} `key`",
                "@param  {Object} `context` The context object.",
                "@return {Boolean}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "object"
            }
          },
          "isObject": {
            "name": "isObject",
            "path": "lib/object.js",
            "test": {
              "path": "test/object.js",
              "code": {
                "start": 129
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 180,
              "end": 183,
              "raw": "helpers.isObject = function(value) {\n  return value && typeof value === 'object'\n    && !Array.isArray(value);\n};",
              "params": [
                "value"
              ]
            },
            "comment": {
              "start": 167,
              "end": 178,
              "raw": "*\n * Return true if `value` is an object.\n *\n * ```handlebars\n * {{isObject \"foo\"}}\n * //=> false\n * ```\n * @name .isObject\n * @param  {String} `value`\n * @return {Boolean}\n * @api public\n ",
              "lines": [
                "",
                "Return true if `value` is an object.",
                "",
                "```handlebars",
                "{{isObject \"foo\"}}",
                "//=> false",
                "```",
                "@name .isObject",
                "@param  {String} `value`",
                "@return {Boolean}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "object"
            }
          },
          "merge": {
            "name": "merge",
            "path": "lib/object.js",
            "test": {
              "path": "test/object.js",
              "code": {
                "start": 141
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 196,
              "end": 208,
              "raw": "helpers.merge = function(context/*, objects, options*/) {\n  var args = [].slice.call(arguments);\n  var last = args[args.length - 1];\n\n  if (last && typeof last === 'object' && last.hash) {\n    last = last.hash;\n    args.pop(); // remove handlebars options object\n    args.push(last);\n  }\n\n  context = merge.apply(merge, args);\n  return context;\n};",
              "params": [
                "context"
              ]
            },
            "comment": {
              "start": 185,
              "end": 194,
              "raw": "*\n * Deeply merge the properties of the given `objects` with the\n * context object.\n *\n * @name .merge\n * @param  {Object} `object` The target object. Pass an empty object to shallow clone.\n * @param  {Object} `objects`\n * @return {Object}\n * @api public\n ",
              "lines": [
                "",
                "Deeply merge the properties of the given `objects` with the",
                "context object.",
                "",
                "@name .merge",
                "@param  {Object} `object` The target object. Pass an empty object to shallow clone.",
                "@param  {Object} `objects`",
                "@return {Object}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "object"
            }
          },
          "parseJSON": {
            "name": "parseJSON",
            "path": "lib/object.js",
            "test": {
              "path": "test/object.js",
              "code": {
                "start": 149
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 221,
              "end": 223,
              "raw": "helpers.parseJSON = function(str, options) {\n  return options.fn(JSON.parse(str));\n};",
              "params": [
                "str",
                "options"
              ]
            },
            "comment": {
              "start": 210,
              "end": 219,
              "raw": "*\n * Block helper that parses a string using `JSON.parse`,\n * then passes the parsed object to the block as context.\n *\n * @param {String} `string` The string to parse\n * @param {Object} `options` Handlebars options object\n * @contributor github.com/keeganstreet\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Block helper that parses a string using `JSON.parse`,",
                "then passes the parsed object to the block as context.",
                "",
                "@param {String} `string` The string to parse",
                "@param {Object} `options` Handlebars options object",
                "@contributor github.com/keeganstreet",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "object"
            }
          },
          "pick": {
            "name": "pick",
            "path": "lib/object.js",
            "test": {
              "path": "test/object.js",
              "code": {
                "start": 156
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 236,
              "end": 253,
              "raw": "helpers.pick = function(props, context, options) {\n  var keys = array.arrayify(props);\n  var len = keys.length, i = -1;\n  var result = {};\n\n  while (++i < len) {\n    result = helpers.extend(result, getObject(context, keys[i]));\n  }\n\n  if (options.fn) {\n    if (Object.keys(result).length) {\n      return options.fn(result);\n    } else {\n      return options.inverse(context);\n    }\n  }\n  return result;\n};",
              "params": [
                "props",
                "context",
                "options"
              ]
            },
            "comment": {
              "start": 225,
              "end": 234,
              "raw": "*\n * Pick properties from the context object.\n *\n * @param {Array|String} `properties` One or more proeperties to pick.\n * @param {Object} `context`\n * @param {Object} `options` Handlebars options object.\n * @return {Object} Returns an object with the picked values. If used as a block helper, the values are passed as context to the inner block. If no values are found, the context is passed to the inverse block.\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Pick properties from the context object.",
                "",
                "@param {Array|String} `properties` One or more proeperties to pick.",
                "@param {Object} `context`",
                "@param {Object} `options` Handlebars options object.",
                "@return {Object} Returns an object with the picked values. If used as a block helper, the values are passed as context to the inner block. If no values are found, the context is passed to the inverse block.",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "object"
            }
          },
          "stringify": {
            "name": "stringify",
            "path": "lib/object.js",
            "test": {
              "path": "test/object.js",
              "code": {
                "start": 184
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 263,
              "end": 268,
              "raw": "helpers.stringify = function(obj, indent) {\n  if (!isNumber(indent)) {\n    indent = 0;\n  }\n  return JSON.stringify(obj, null, indent);\n};",
              "params": [
                "obj",
                "indent"
              ]
            },
            "comment": {
              "start": 255,
              "end": 261,
              "raw": "*\n * Stringify an object using `JSON.stringify`.\n *\n * @param  {Object} `obj` Object to stringify\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Stringify an object using `JSON.stringify`.",
                "",
                "@param  {Object} `obj` Object to stringify",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "object"
            }
          }
        },
        "codepath": "lib/object.js",
        "count": 11
      },
      "missingdocs": []
    },
    "path": {
      "name": "path",
      "path": "lib/path.js",
      "tests": "test/path.js",
      "data": {
        "methods": {
          "basename": {
            "name": "basename",
            "path": "lib/path.js",
            "test": {
              "path": "test/path.js",
              "code": {
                "start": 9
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 24,
              "end": 26,
              "raw": "helpers.basename = function(filepath) {\n  return path.basename(filepath);\n};",
              "params": [
                "filepath"
              ]
            },
            "comment": {
              "start": 12,
              "end": 22,
              "raw": "*\n * Get the file extension from the given `filepath`.\n *\n * ```handlebars\n * {{basename \"docs/toc.md\"}}\n * //=> 'toc.md'\n * ```\n * @param {String} `ext`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Get the file extension from the given `filepath`.",
                "",
                "```handlebars",
                "{{basename \"docs/toc.md\"}}",
                "//=> 'toc.md'",
                "```",
                "@param {String} `ext`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "path"
            }
          },
          "dirname": {
            "name": "dirname",
            "path": "lib/path.js",
            "test": {
              "path": "test/path.js",
              "code": {
                "start": 31
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 40,
              "end": 42,
              "raw": "helpers.dirname = function(filepath) {\n  return path.dirname(filepath);\n};",
              "params": [
                "filepath"
              ]
            },
            "comment": {
              "start": 28,
              "end": 38,
              "raw": "*\n * Get the directory path segment from the given `filepath`.\n *\n * ```handlebars\n * {{dirname \"docs/toc.md\"}}\n * //=> 'docs'\n * ```\n * @param {String} `ext`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Get the directory path segment from the given `filepath`.",
                "",
                "```handlebars",
                "{{dirname \"docs/toc.md\"}}",
                "//=> 'docs'",
                "```",
                "@param {String} `ext`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "path"
            }
          },
          "extname": {
            "name": "extname",
            "path": "lib/path.js",
            "test": {
              "path": "test/path.js",
              "code": {
                "start": 20
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 56,
              "end": 58,
              "raw": "helpers.extname = function(filepath) {\n  return path.extname(filepath);\n};",
              "params": [
                "filepath"
              ]
            },
            "comment": {
              "start": 44,
              "end": 54,
              "raw": "*\n * Get the file extension from the given `filepath`.\n *\n * ```handlebars\n * {{extname \"docs/toc.md\"}}\n * //=> '.md'\n * ```\n * @param {String} `filepath`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Get the file extension from the given `filepath`.",
                "",
                "```handlebars",
                "{{extname \"docs/toc.md\"}}",
                "//=> '.md'",
                "```",
                "@param {String} `filepath`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "path"
            }
          },
          "relative": {
            "name": "relative",
            "path": "lib/path.js",
            "test": {
              "path": "test/path.js",
              "code": {
                "start": 38
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 73,
              "end": 75,
              "raw": "helpers.relative = function(a, b) {\n  return relative(a, b);\n};",
              "params": [
                "a",
                "b"
              ]
            },
            "comment": {
              "start": 60,
              "end": 71,
              "raw": "*\n * Get the relative filepath from `a` to `b`.\n *\n * ```handlebars\n * {{relative a b}}\n * ```\n *\n * @param {String} `a`\n * @param {String} `b`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Get the relative filepath from `a` to `b`.",
                "",
                "```handlebars",
                "{{relative a b}}",
                "```",
                "",
                "@param {String} `a`",
                "@param {String} `b`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "path"
            }
          }
        },
        "codepath": "lib/path.js",
        "count": 4
      },
      "missingdocs": []
    },
    "string": {
      "name": "string",
      "path": "lib/string.js",
      "tests": "test/string.js",
      "data": {
        "methods": {
          "capitalize": {
            "name": "capitalize",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 9
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 19,
              "end": 24,
              "raw": "helpers.capitalize = function(str) {\n  if (str && typeof str === 'string') {\n    return str.charAt(0).toUpperCase()\n      + str.slice(1);\n  }\n};",
              "params": [
                "str"
              ]
            },
            "comment": {
              "start": 11,
              "end": 17,
              "raw": "*\n * Capitalize first word in a sentence\n *\n * @param  {String} `str`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Capitalize first word in a sentence",
                "",
                "@param  {String} `str`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "capitalizeAll": {
            "name": "capitalizeAll",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 31
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 34,
              "end": 47,
              "raw": "helpers.capitalizeAll = function(str) {\n  if (str && typeof str === 'string') {\n    var words = str.split(' ');\n    var len = words.length;\n    var res = [];\n    var i = 0;\n\n    while(len--) {\n      var word = words[i++];\n      res.push(exports.capitalize(word));\n    }\n    return res.join(' ');\n  }\n};",
              "params": [
                "str"
              ]
            },
            "comment": {
              "start": 26,
              "end": 32,
              "raw": "*\n * Capitalize all words in a sentence\n *\n * @param  {String} `str`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Capitalize all words in a sentence",
                "",
                "@param  {String} `str`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "capitalizeEach": {
            "name": "capitalizeEach",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 42
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 57,
              "end": 63,
              "raw": "helpers.capitalizeEach = function(str) {\n  if (str && typeof str === 'string') {\n    return str.replace(/\\w\\S*/g, function(word) {\n      return exports.capitalize(word);\n    });\n  }\n};",
              "params": [
                "str"
              ]
            },
            "comment": {
              "start": 49,
              "end": 55,
              "raw": "*\n * Capitalize each word in a sentence\n *\n * @param  {String} `str`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Capitalize each word in a sentence",
                "",
                "@param  {String} `str`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "capitalizeFirst": {
            "name": "capitalizeFirst",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 20
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 73,
              "end": 79,
              "raw": "helpers.capitalizeFirst = function(str) {\n  if (str && typeof str === 'string') {\n    return str.replace(/\\w\\S*/, function(word) {\n      return exports.capitalize(word);\n    });\n  }\n};",
              "params": [
                "str"
              ]
            },
            "comment": {
              "start": 65,
              "end": 71,
              "raw": "*\n * Capitalize the first word in a sentence\n *\n * @param  {String} `str`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Capitalize the first word in a sentence",
                "",
                "@param  {String} `str`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "center": {
            "name": "center",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 53
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 90,
              "end": 100,
              "raw": "helpers.center = function(str, spaces) {\n  if (str && typeof str === 'string') {\n    var space = '';\n    var i = 0;\n    while (i < spaces) {\n      space += '&nbsp;';\n      i++;\n    }\n    return space + str + space;\n  }\n};",
              "params": [
                "str",
                "spaces"
              ]
            },
            "comment": {
              "start": 81,
              "end": 88,
              "raw": "*\n * Center a string using non-breaking spaces\n *\n * @param  {String} `str`\n * @param  {String} `spaces`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Center a string using non-breaking spaces",
                "",
                "@param  {String} `str`",
                "@param  {String} `spaces`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "dashify": {
            "name": "dashify",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 64
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 109,
              "end": 113,
              "raw": "helpers.dashify = function(str) {\n  if (str && typeof str === 'string') {\n    return str.split('.').join('-');\n  }\n};",
              "params": [
                "str"
              ]
            },
            "comment": {
              "start": 102,
              "end": 107,
              "raw": "*\n * Replace periods in string with hyphens.\n * @param  {String} `str`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Replace periods in string with hyphens.",
                "@param  {String} `str`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "hyphenate": {
            "name": "hyphenate",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 94
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 123,
              "end": 127,
              "raw": "helpers.hyphenate = function(str) {\n  if (str && typeof str === 'string') {\n    return str.split(' ').join('-');\n  }\n};",
              "params": [
                "str"
              ]
            },
            "comment": {
              "start": 115,
              "end": 121,
              "raw": "*\n * Replace spaces in string with hyphens.\n *\n * @param  {String} `str`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Replace spaces in string with hyphens.",
                "",
                "@param  {String} `str`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "isString": {
            "name": "isString",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {}
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 137,
              "end": 139,
              "raw": "helpers.isString = function(val) {\n  return val && typeof val === 'string';\n};",
              "params": [
                "val"
              ]
            },
            "comment": {
              "start": 129,
              "end": 135,
              "raw": "*\n * Return true if val is a string\n *\n * @param  {String} `val`\n * @return {Boolean}\n * @api public\n ",
              "lines": [
                "",
                "Return true if val is a string",
                "",
                "@param  {String} `val`",
                "@return {Boolean}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "lowercase": {
            "name": "lowercase",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 105
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 149,
              "end": 153,
              "raw": "helpers.lowercase = function(str) {\n  if (str && typeof str === 'string') {\n    return str.toLowerCase();\n  }\n};",
              "params": [
                "str"
              ]
            },
            "comment": {
              "start": 141,
              "end": 147,
              "raw": "*\n * Make all letters in the string lowercase\n *\n * @param  {String} `str`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Make all letters in the string lowercase",
                "",
                "@param  {String} `str`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "plusify": {
            "name": "plusify",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 127
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 164,
              "end": 168,
              "raw": "helpers.plusify = function(str) {\n  if (str && typeof str === 'string') {\n    return str.split(' ').join('+');\n  }\n};",
              "params": [
                "str"
              ]
            },
            "comment": {
              "start": 155,
              "end": 162,
              "raw": "*\n * Replace spaces in string with pluses.\n *\n * @param  {String} `str` The input string\n * @return {String} Input string with spaces replaced by plus signs\n * @source Stephen Way <https://github.com/stephenway>\n * @api public\n ",
              "lines": [
                "",
                "Replace spaces in string with pluses.",
                "",
                "@param  {String} `str` The input string",
                "@return {String} Input string with spaces replaced by plus signs",
                "@source Stephen Way <https://github.com/stephenway>",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "sentence": {
            "name": "sentence",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 168
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 178,
              "end": 187,
              "raw": "helpers.sentence = function(str) {\n  var re = /((?:\\S[^\\.\\?\\!]*)[\\.\\?\\!]*)/g;\n\n  if (str && typeof str === 'string') {\n    return str.replace(re, function(txt) {\n      return txt.charAt(0).toUpperCase()\n        + txt.substr(1).toLowerCase();\n    });\n  }\n};",
              "params": [
                "str"
              ]
            },
            "comment": {
              "start": 170,
              "end": 176,
              "raw": "*\n * Sentence case the given string\n *\n * @param  {String} `str`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Sentence case the given string",
                "",
                "@param  {String} `str`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "titleize": {
            "name": "titleize",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 179
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 197,
              "end": 212,
              "raw": "helpers.titleize = function(str) {\n  if (str && typeof str === 'string') {\n    var title = str.replace(/[ \\-_]+/g, ' ');\n    var words = title.match(/\\w+/g);\n    var len = words.length;\n    var res = [];\n    var i = 0;\n\n    while (len--) {\n      var word = words[i++];\n      res.push(exports.capitalize(word));\n    }\n\n    return res.join(' ');\n  }\n};",
              "params": [
                "str"
              ]
            },
            "comment": {
              "start": 189,
              "end": 195,
              "raw": "*\n * Title case. \"This is Title Case\"\n *\n * @param  {String} `str`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Title case. \"This is Title Case\"",
                "",
                "@param  {String} `str`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "reverse": {
            "name": "reverse",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 157
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 223,
              "end": 227,
              "raw": "helpers.reverse = function(str) {\n  if (str && typeof str === 'string') {\n    return str.split('').reverse().join('');\n  }\n};",
              "params": [
                "str"
              ]
            },
            "comment": {
              "start": 214,
              "end": 221,
              "raw": "*\n * Reverse a string.\n *\n * @name .reverse\n * @param {type} `str`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Reverse a string.",
                "",
                "@name .reverse",
                "@param {type} `str`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "occurrences": {
            "name": "occurrences",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 116
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 238,
              "end": 253,
              "raw": "helpers.occurrences = function(str, substring) {\n  if (str && typeof str === \"string\") {\n    var n = 0;\n    var pos = 0;\n    var l = substring.length;\n    while (pos = str.indexOf(substring, pos)) {\n      if (pos > -1) {\n        n++;\n        pos += l;\n      } else {\n        break;\n      }\n    }\n    return n;\n  }\n};",
              "params": [
                "str",
                "substring"
              ]
            },
            "comment": {
              "start": 229,
              "end": 236,
              "raw": "*\n * Return the number of occurrances of a substring within a string.\n *\n * @param  {String} `str`\n * @param  {String} `substring`\n * @return {Number} Number of occurrances\n * @api public\n ",
              "lines": [
                "",
                "Return the number of occurrances of a substring within a string.",
                "",
                "@param  {String} `str`",
                "@param  {String} `substring`",
                "@return {Number} Number of occurrances",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "replace": {
            "name": "replace",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 146
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 265,
              "end": 269,
              "raw": "helpers.replace = function(str, a, b) {\n  if (str && typeof str === \"string\") {\n    return str.split(a).join(b);\n  }\n};",
              "params": [
                "str",
                "a",
                "b"
              ]
            },
            "comment": {
              "start": 255,
              "end": 263,
              "raw": "*\n * Replace all occurrences of `a` in a string with `b`.\n *\n * @param  {String} `str`\n * @param  {String} `a`\n * @param  {String} `b`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Replace all occurrences of `a` in a string with `b`.",
                "",
                "@param  {String} `str`",
                "@param  {String} `a`",
                "@param  {String} `b`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "ellipsis": {
            "name": "ellipsis",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 75
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 281,
              "end": 290,
              "raw": "helpers.ellipsis = function(str, limit, append) {\n  if (str && typeof str === \"string\") {\n    if (utils.isUndefined(append)) append = '';\n    var sanitized = str.replace(/(<([^>]+)>)/g, '');\n    if (sanitized.length > limit) {\n      return sanitized.substr(0, limit - append.length) + append;\n    }\n    return sanitized;\n  }\n};",
              "params": [
                "str",
                "limit",
                "append"
              ]
            },
            "comment": {
              "start": 271,
              "end": 279,
              "raw": "*\n * Truncate the input string and removes all HTML tags\n *\n * @param  {String} `str` The input string.\n * @param  {Number} `limit` The number of characters to limit the string.\n * @param  {String} `append` The string to append if charaters are omitted.\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Truncate the input string and removes all HTML tags",
                "",
                "@param  {String} `str` The input string.",
                "@param  {Number} `limit` The number of characters to limit the string.",
                "@param  {String} `append` The string to append if charaters are omitted.",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "truncate": {
            "name": "truncate",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 190
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 303,
              "end": 313,
              "raw": "helpers.truncate = function(str, limit, omission) {\n  if (str && typeof str === \"string\") {\n    if (utils.isUndefined(omission)) {\n      omission = '';\n    }\n    if (str.length > limit) {\n      return str.substring(0, limit - omission.length) + omission;\n    }\n    return str;\n  }\n};",
              "params": [
                "str",
                "limit",
                "omission"
              ]
            },
            "comment": {
              "start": 292,
              "end": 301,
              "raw": "*\n * Truncates a string given a specified `length`, providing a\n * custom string to denote an `omission`.\n *\n * @param  {String} `str`\n * @param  {String} `length`\n * @param  {String} `omission`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Truncates a string given a specified `length`, providing a",
                "custom string to denote an `omission`.",
                "",
                "@param  {String} `str`",
                "@param  {String} `length`",
                "@param  {String} `omission`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "string"
            }
          },
          "startsWith": {
            "name": "startsWith",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 209
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 335,
              "end": 347,
              "raw": "helpers.startsWith = function(prefix, str, options) {\n  var args = [].slice.call(arguments);\n  options = args.pop();\n  if (str && typeof str === \"string\") {\n    if (str.indexOf(prefix) === 0) {\n      return options.fn(this);\n    }\n  }\n  if (typeof options.inverse === 'function') {\n    return options.inverse(this);\n  }\n  return '';\n};",
              "params": [
                "prefix",
                "str",
                "options"
              ]
            },
            "comment": {
              "start": 315,
              "end": 333,
              "raw": "*\n * Tests whether a string begins with the given prefix.\n * Behaves sensibly if the string is null.\n *\n * ```handlebars\n * {{#startsWith \"Goodbye\" \"Hello, world!\"}}\n *   Whoops\n * {{else}}\n *   Bro, do you even hello world?\n * {{/startsWith}}\n * ```\n * @param  {String} `prefix`\n * @param  {String} `testString`\n * @param  {String} `options`\n * @contributor Dan Fox <http://github.com/iamdanfox>\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Tests whether a string begins with the given prefix.",
                "Behaves sensibly if the string is null.",
                "",
                "```handlebars",
                "{{#startsWith \"Goodbye\" \"Hello, world!\"}}",
                "Whoops",
                "{{else}}",
                "Bro, do you even hello world?",
                "{{/startsWith}}",
                "```",
                "@param  {String} `prefix`",
                "@param  {String} `testString`",
                "@param  {String} `options`",
                "@contributor Dan Fox <http://github.com/iamdanfox>",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "string"
            }
          },
          "uppercase": {
            "name": "uppercase",
            "path": "lib/string.js",
            "test": {
              "path": "test/string.js",
              "code": {
                "start": 228
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": true
            },
            "code": {
              "start": 362,
              "end": 372,
              "raw": "helpers.uppercase = function(str, options) {\n  if (str && typeof str === \"string\") {\n    return str.toUpperCase();\n  } else {\n    options = str;\n  }\n  if (typeof options === 'object' && options.fn) {\n    return options.fn(this).toUpperCase();\n  }\n  return '';\n};",
              "params": [
                "str",
                "options"
              ]
            },
            "comment": {
              "start": 349,
              "end": 360,
              "raw": "*\n * Uppercase all of the characters in the given string. If used as a\n * block helper it will uppercase the entire block. This helper\n * does not support inverse blocks.\n *\n * @name .uppercase\n * @param {String} `str` The string to uppercase\n * @param {Object} `options` Handlebars options object\n * @return {String}\n * @block\n * @api public\n ",
              "lines": [
                "",
                "Uppercase all of the characters in the given string. If used as a",
                "block helper it will uppercase the entire block. This helper",
                "does not support inverse blocks.",
                "",
                "@name .uppercase",
                "@param {String} `str` The string to uppercase",
                "@param {Object} `options` Handlebars options object",
                "@return {String}",
                "@block",
                "@api public",
                ""
              ],
              "hasBlockComment": true
            },
            "context": {
              "parent": "string"
            }
          }
        },
        "codepath": "lib/string.js",
        "count": 19
      },
      "missingdocs": []
    },
    "url": {
      "name": "url",
      "path": "lib/url.js",
      "tests": "test/url.js",
      "data": {
        "methods": {
          "encodeURI": {
            "name": "encodeURI",
            "path": "lib/url.js",
            "test": {
              "path": "test/url.js",
              "code": {
                "start": 33
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 22,
              "end": 24,
              "raw": "helpers.encodeURI = function(str) {\n  return encodeURIComponent(str);\n};",
              "params": [
                "str"
              ]
            },
            "comment": {
              "start": 11,
              "end": 20,
              "raw": "*\n * Encodes a Uniform Resource Identifier (URI) component\n * by replacing each instance of certain characters by\n * one, two, three, or four escape sequences representing\n * the UTF-8 encoding of the character.\n *\n * @param  {String} `str` The un-encoded string\n * @return {String} The endcoded string\n * @api public\n ",
              "lines": [
                "",
                "Encodes a Uniform Resource Identifier (URI) component",
                "by replacing each instance of certain characters by",
                "one, two, three, or four escape sequences representing",
                "the UTF-8 encoding of the character.",
                "",
                "@param  {String} `str` The un-encoded string",
                "@return {String} The endcoded string",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "url"
            }
          },
          "decodeURI": {
            "name": "decodeURI",
            "path": "lib/url.js",
            "test": {
              "path": "test/url.js",
              "code": {
                "start": 40
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 34,
              "end": 36,
              "raw": "helpers.decodeURI = function(str) {\n  return decodeURIComponent(str);\n};",
              "params": [
                "str"
              ]
            },
            "comment": {
              "start": 26,
              "end": 32,
              "raw": "*\n * Decode a Uniform Resource Identifier (URI) component.\n *\n * @param  {String} `str`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Decode a Uniform Resource Identifier (URI) component.",
                "",
                "@param  {String} `str`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "url"
            }
          },
          "urlResolve": {
            "name": "urlResolve",
            "path": "lib/url.js",
            "test": {
              "path": "test/url.js",
              "code": {
                "start": 9
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 48,
              "end": 50,
              "raw": "helpers.urlResolve = function(base, href) {\n  return url.resolve(base, href);\n};",
              "params": [
                "base",
                "href"
              ]
            },
            "comment": {
              "start": 38,
              "end": 46,
              "raw": "*\n * Take a base URL, and a href URL, and resolve them as a\n * browser would for an anchor tag.\n *\n * @param  {String} `base`\n * @param  {String} `href`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Take a base URL, and a href URL, and resolve them as a",
                "browser would for an anchor tag.",
                "",
                "@param  {String} `base`",
                "@param  {String} `href`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "url"
            }
          },
          "urlParse": {
            "name": "urlParse",
            "path": "lib/url.js",
            "test": {
              "path": "test/url.js",
              "code": {
                "start": 47
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 64,
              "end": 66,
              "raw": "helpers.urlParse = function(path, type, query) {\n  return JSON.stringify(url.parse(path), type, query);\n};",
              "params": [
                "path",
                "type",
                "query"
              ]
            },
            "comment": {
              "start": 52,
              "end": 62,
              "raw": "*\n * Take a URL string, and return an object. Pass true as the\n * second argument to also parse the query string using the\n * querystring module. Defaults to false.\n *\n * @param  {String} `path`\n * @param  {String} `type`\n * @param  {String} `query`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "Take a URL string, and return an object. Pass true as the",
                "second argument to also parse the query string using the",
                "querystring module. Defaults to false.",
                "",
                "@param  {String} `path`",
                "@param  {String} `type`",
                "@param  {String} `query`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "url"
            }
          },
          "stripQuerystring": {
            "name": "stripQuerystring",
            "path": "lib/url.js",
            "test": {
              "path": "test/url.js",
              "code": {
                "start": 26
              }
            },
            "stats": {
              "isModule": false,
              "isBlockHelper": false
            },
            "code": {
              "start": 75,
              "end": 77,
              "raw": "helpers.stripQuerystring = function(url) {\n  return url.split(\"?\")[0];\n};",
              "params": [
                "url"
              ]
            },
            "comment": {
              "start": 68,
              "end": 73,
              "raw": "*\n * @name .stripQuerystring\n * @param {type} `url`\n * @return {String}\n * @api public\n ",
              "lines": [
                "",
                "@name .stripQuerystring",
                "@param {type} `url`",
                "@return {String}",
                "@api public",
                ""
              ],
              "hasBlockComment": false
            },
            "context": {
              "parent": "url"
            }
          }
        },
        "codepath": "lib/url.js",
        "count": 5
      },
      "missingdocs": []
    }
  },
  "total": 121
}